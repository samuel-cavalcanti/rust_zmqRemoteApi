<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"><html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-us">
<title>simIK API</title>
<link rel="stylesheet" type="text/css" href="../../helpFiles/style.css">
<script type="text/javascript">
//
function getParameterByName(name, url = window.location.href)
{
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if(!results) return null;
    if(!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
//
                </script><style type="text/css">
td.section { margin: 0; padding: 0; }
                </style></head>
<body>
<div align="center"><table class="allEncompassingTable">

<tr><td id="title" class="section"><h1>IK plugin API reference</h1></td></tr>
<tr><td id="info" class="section"><p class="warningBox">API functions for creating kinematics tasks. All units, unless otherwise indicated, are specified in meters and radians.</p></td></tr>

<tr><td id="alphabetical" class="section"><pre class="apiList">
<a href="?#simIK.addElement">simIK.addElement</a>
<a href="?#simIK.addElementFromScene">simIK.addElementFromScene</a>
<a href="?#simIK.computeGroupJacobian">simIK.computeGroupJacobian</a>
<a href="?#simIK.computeJacobian">simIK.computeJacobian</a>
<a href="?#simIK.createDebugOverlay">simIK.createDebugOverlay</a>
<a href="?#simIK.createDummy">simIK.createDummy</a>
<a href="?#simIK.createEnvironment">simIK.createEnvironment</a>
<a href="?#simIK.createGroup">simIK.createGroup</a>
<a href="?#simIK.createJoint">simIK.createJoint</a>
<a href="?#simIK.doesGroupExist">simIK.doesGroupExist</a>
<a href="?#simIK.doesObjectExist">simIK.doesObjectExist</a>
<a href="?#simIK.duplicateEnvironment">simIK.duplicateEnvironment</a>
<a href="?#simIK.eraseDebugOverlay">simIK.eraseDebugOverlay</a>
<a href="?#simIK.eraseEnvironment">simIK.eraseEnvironment</a>
<a href="?#simIK.eraseObject">simIK.eraseObject</a>
<a href="?#simIK.generatePath">simIK.generatePath</a>
<a href="?#simIK.findConfig">simIK.findConfig</a>
<a href="?#simIK.getAlternateConfigs">simIK.getAlternateConfigs</a>
<a href="?#simIK.getElementBase">simIK.getElementBase</a>
<a href="?#simIK.getElementConstraints">simIK.getElementConstraints</a>
<a href="?#simIK.getElementFlags">simIK.getElementFlags</a>
<a href="?#simIK.getElementPrecision">simIK.getElementPrecision</a>
<a href="?#simIK.getElementWeights">simIK.getElementWeights</a>
<a href="?#simIK.getGroupCalculation">simIK.getGroupCalculation</a>
<a href="?#simIK.getGroupFlags">simIK.getGroupFlags</a>
<a href="?#simIK.getGroupHandle">simIK.getGroupHandle</a>
<a href="?#simIK.getGroupJointLimitHits">simIK.getGroupJointLimitHits</a>
<a href="?#simIK.getGroupJoints">simIK.getGroupJoints</a>
<a href="?#simIK.getJointDependency">simIK.getJointDependency</a>
<a href="?#simIK.getJointInterval">simIK.getJointInterval</a>
<a href="?#simIK.getJointLimitMargin">simIK.getJointLimitMargin</a>
<a href="?#simIK.getJointMatrix">simIK.getJointMatrix</a>
<a href="?#simIK.getJointMaxStepSize">simIK.getJointMaxStepSize</a>
<a href="?#simIK.getJointMode">simIK.getJointMode</a>
<a href="?#simIK.getJointPosition">simIK.getJointPosition</a>
<a href="?#simIK.getJointScrewLead">simIK.getJointScrewLead</a>
<a href="?#simIK.getJointTransformation">simIK.getJointTransformation</a>
<a href="?#simIK.getJointType">simIK.getJointType</a>
<a href="?#simIK.getJointWeight">simIK.getJointWeight</a>
<a href="?#simIK.getObjectHandle">simIK.getObjectHandle</a>
<a href="?#simIK.getObjectMatrix">simIK.getObjectMatrix</a>
<a href="?#simIK.getObjectParent">simIK.getObjectParent</a>
<a href="?#simIK.getObjectPose">simIK.getObjectPose</a>
<a href="?#simIK.getObjects">simIK.getObjects</a>
<a href="?#simIK.getObjectTransformation">simIK.getObjectTransformation</a>
<a href="?#simIK.getObjectType">simIK.getObjectType</a>
<a href="?#simIK.getTargetDummy">simIK.getTargetDummy</a>
<a href="?#simIK.handleGroup">simIK.handleGroup</a>
<a href="?#simIK.handleGroups">simIK.handleGroups</a>
<a href="?#simIK.load">simIK.load</a>
<a href="?#simIK.save">simIK.save</a>
<a href="?#simIK.setElementBase">simIK.setElementBase</a>
<a href="?#simIK.setElementConstraints">simIK.setElementConstraints</a>
<a href="?#simIK.setElementFlags">simIK.setElementFlags</a>
<a href="?#simIK.setElementPrecision">simIK.setElementPrecision</a>
<a href="?#simIK.setElementWeights">simIK.setElementWeights</a>
<a href="?#simIK.setGroupCalculation">simIK.setGroupCalculation</a>
<a href="?#simIK.setGroupFlags">simIK.setGroupFlags</a>
<a href="?#simIK.setJointDependency">simIK.setJointDependency</a>
<a href="?#simIK.setJointInterval">simIK.setJointInterval</a>
<a href="?#simIK.setJointLimitMargin">simIK.setJointLimitMargin</a>
<a href="?#simIK.setJointMaxStepSize">simIK.setJointMaxStepSize</a>
<a href="?#simIK.setJointMode">simIK.setJointMode</a>
<a href="?#simIK.setJointPosition">simIK.setJointPosition</a>
<a href="?#simIK.setJointScrewLead">simIK.setJointScrewLead</a>
<a href="?#simIK.setJointWeight">simIK.setJointWeight</a>
<a href="?#simIK.setObjectMatrix">simIK.setObjectMatrix</a>
<a href="?#simIK.setObjectParent">simIK.setObjectParent</a>
<a href="?#simIK.setObjectPose">simIK.setObjectPose</a>
<a href="?#simIK.setObjectTransformation">simIK.setObjectTransformation</a>
<a href="?#simIK.setSphericalJointMatrix">simIK.setSphericalJointMatrix</a>
<a href="?#simIK.setSphericalJointRotation">simIK.setSphericalJointRotation</a>
<a href="?#simIK.setTargetDummy">simIK.setTargetDummy</a>
<a href="?#simIK.syncToSim">simIK.syncToSim</a>
<a href="?#simIK.syncFromSim">simIK.syncFromSim</a>
</pre></td></tr>

<tr><td id="category" class="section">

<h2><a name="environment"></a>Environment functions and helpers</h2>
<pre class="apiList">
<a href="?#simIK.createEnvironment">simIK.createEnvironment</a>
<a href="?#simIK.eraseEnvironment">simIK.eraseEnvironment</a>
<a href="?#simIK.duplicateEnvironment">simIK.duplicateEnvironment</a>
<a href="?#simIK.createDebugOverlay">simIK.createDebugOverlay</a>
<a href="?#simIK.eraseDebugOverlay">simIK.eraseDebugOverlay</a>
<a href="?#simIK.save">simIK.save</a>
<a href="?#simIK.load">simIK.load</a>
<a href="?#simIK.addElementFromScene">simIK.addElementFromScene</a>
<a href="?#simIK.syncToSim">simIK.syncToSim</a>
<a href="?#simIK.syncFromSim">simIK.syncFromSim</a>
</pre>


<h2><a name="objects"></a>Objects</h2>
<pre class="apiList">
<a href="?#simIK.getObjects">simIK.getObjects</a>
<a href="?#simIK.getObjectHandle">simIK.getObjectHandle</a>
<a href="?#simIK.doesObjectExist">simIK.doesObjectExist</a>
<a href="?#simIK.eraseObject">simIK.eraseObject</a>
<a href="?#simIK.getObjectParent">simIK.getObjectParent</a>
<a href="?#simIK.setObjectParent">simIK.setObjectParent</a>
<a href="?#simIK.getObjectPose">simIK.getObjectPose</a>
<a href="?#simIK.setObjectPose">simIK.setObjectPose</a>
<a href="?#simIK.getObjectTransformation">simIK.getObjectTransformation</a>
<a href="?#simIK.setObjectTransformation">simIK.setObjectTransformation</a>
<a href="?#simIK.getObjectType">simIK.getObjectType</a>
<a href="?#simIK.getObjectMatrix">simIK.getObjectMatrix</a>
<a href="?#simIK.setObjectMatrix">simIK.setObjectMatrix</a>
</pre>


<h2><a name="dummies"></a>Dummies</h2>
<pre class="apiList">
<a href="?#simIK.createDummy">simIK.createDummy</a>
<a href="?#simIK.eraseObject">simIK.eraseObject</a>
<a href="?#simIK.getTargetDummy">simIK.getTargetDummy</a>
<a href="?#simIK.setTargetDummy">simIK.setTargetDummy</a>
</pre>


<h2><a name="joints"></a>Joints</h2>
<pre class="apiList">
<a href="?#simIK.createJoint">simIK.createJoint</a>
<a href="?#simIK.eraseObject">simIK.eraseObject</a>
<a href="?#simIK.getJointPosition">simIK.getJointPosition</a>
<a href="?#simIK.setJointPosition">simIK.setJointPosition</a>
<a href="?#simIK.getJointMode">simIK.getJointMode</a>
<a href="?#simIK.setJointMode">simIK.setJointMode</a>
<a href="?#simIK.getJointInterval">simIK.getJointInterval</a>
<a href="?#simIK.setJointInterval">simIK.setJointInterval</a>
<a href="?#simIK.getJointDependency">simIK.getJointDependency</a>
<a href="?#simIK.setJointDependency">simIK.setJointDependency</a>
<a href="?#simIK.getJointWeight">simIK.getJointWeight</a>
<a href="?#simIK.setJointWeight">simIK.setJointWeight</a>
<a href="?#simIK.getJointLimitMargin">simIK.getJointLimitMargin</a>
<a href="?#simIK.setJointLimitMargin">simIK.setJointLimitMargin</a>
<a href="?#simIK.getJointMaxStepSize">simIK.getJointMaxStepSize</a>
<a href="?#simIK.setJointMaxStepSize">simIK.setJointMaxStepSize</a>
<a href="?#simIK.getJointScrewLead">simIK.getJointScrewLead</a>
<a href="?#simIK.setJointScrewLead">simIK.setJointScrewLead</a>
<a href="?#simIK.getJointTransformation">simIK.getJointTransformation</a>
<a href="?#simIK.setSphericalJointRotation">simIK.setSphericalJointRotation</a>
<a href="?#simIK.getJointType">simIK.getJointType</a>
<a href="?#simIK.getJointMatrix">simIK.getJointMatrix</a>
<a href="?#simIK.setSphericalJointMatrix">simIK.setSphericalJointMatrix</a>
<a href="?#simIK.getGroupJoints">simIK.getGroupJoints</a>
</pre>


<h2><a name="ikGroups"></a>IK groups</h2>
<pre class="apiList">
<a href="?#simIK.createGroup">simIK.createGroup</a>
<a href="?#simIK.getGroupHandle">simIK.getGroupHandle</a>
<a href="?#simIK.doesGroupExist">simIK.doesGroupExist</a>
<a href="?#simIK.getGroupFlags">simIK.getGroupFlags</a>
<a href="?#simIK.setGroupFlags">simIK.setGroupFlags</a>
<a href="?#simIK.getGroupJointLimitHits">simIK.getGroupJointLimitHits</a>
<a href="?#simIK.getGroupJoints">simIK.getGroupJoints</a>
<a href="?#simIK.getGroupCalculation">simIK.getGroupCalculation</a>
<a href="?#simIK.setGroupCalculation">simIK.setGroupCalculation</a>
</pre>


<h2><a name="ikElements"></a>IK elements</h2>
<pre class="apiList">
<a href="?#simIK.addElement">simIK.addElement</a>
<a href="?#simIK.addElementFromScene">simIK.addElementFromScene</a>
<a href="?#simIK.getElementFlags">simIK.getElementFlags</a>
<a href="?#simIK.setElementFlags">simIK.setElementFlags</a>
<a href="?#simIK.getElementConstraints">simIK.getElementConstraints</a>
<a href="?#simIK.setElementConstraints">simIK.setElementConstraints</a>
<a href="?#simIK.getElementBase">simIK.getElementBase</a>
<a href="?#simIK.setElementBase">simIK.setElementBase</a>
<a href="?#simIK.getElementPrecision">simIK.getElementPrecision</a>
<a href="?#simIK.setElementPrecision">simIK.setElementPrecision</a>
<a href="?#simIK.getElementWeights">simIK.getElementWeights</a>
<a href="?#simIK.setElementWeights">simIK.setElementWeights</a>
</pre>


<h2><a name="ikCalculation"></a>IK calculation</h2>
<pre class="apiList">
<a href="?#simIK.handleGroup">simIK.handleGroup</a>
<a href="?#simIK.handleGroups">simIK.handleGroups</a>
<a href="?#simIK.findConfig">simIK.findConfig</a>
<a href="?#simIK.getAlternateConfigs">simIK.getAlternateConfigs</a>
<a href="?#simIK.computeGroupJacobian">simIK.computeGroupJacobian</a>
<a href="?#simIK.computeJacobian">simIK.computeJacobian</a>
<a href="?#simIK.generatePath">simIK.generatePath</a>
<a href="?#simIK.syncToSim">simIK.syncToSim</a>
<a href="?#simIK.syncFromSim">simIK.syncFromSim</a>
</pre>
</td></tr>

<tr><td id="commands" class="section">
<p class="subsectionBar">
<a name="simIK.addIkElement" id="simIK.addIkElement"></a><a name="simIK.addElement" id="simIK.addElement"></a>simIK.addElement</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Adds a new IK element to an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int elementHandle=simIK.addElement(int environmentHandle,int ikGroupHandle,int tipDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>tipDummyHandle</strong>: the handle of the dummy object that should act as the tip in the IK element.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet"><div><strong>elementHandle</strong>: the IK element handle in the IK group</div></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int elementHandle=simIK.addElement(int environmentHandle,int ikGroupHandle,int tipDummyHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a>, <a href="#simIK.addElementFromScene">simIK.addElementFromScene</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.addIkElementFromScene" id="simIK.addIkElementFromScene"></a><a name="simIK.addElementFromScene" id="simIK.addElementFromScene"></a>simIK.addElementFromScene</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Convenience function to quickly generate an IK element from a kinematic chain in the scene</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ikElement,map simToIkObjectMap,map ikToSimObjectMap=simIK.addElementFromScene(int environmentHandle,int ikGroup,int baseHandle,int tipHandle,int targetHandle,int constraints)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the IK environment.</div>
<div><strong>ikGroup</strong>: the handle of the IK group, where the IK element should be added.</div>
<div><strong>baseHandle</strong>: the handle of the base object in the scene. Can be -1 if the base of the kinematic chain is not moving nor changing orientation.</div>
<div><strong>tipHandle</strong>: the handle of the tip object in the scene.</div>
<div><strong>targetHandle</strong>: the handle of the target object in the scene.</div>
<div><strong>constraints</strong>: the constraints for the IK element that should be created. Bit-combine following: simIK.constraint_x, simIK.constraint_y, simIK.constraint_z, simIK.constraint_alpha_beta, simIK.constraint_gamma (simIK.constraint_gamma should only be set if simIK.constraint_alpha_beta is also set). For convenience we also have simIK.constraint_position=simIK.constraint_x|simIK.constraint_y|simIK.constraint_z, simIK.constraint_orientation=simIK.constraint_alpha_beta|simIK.constraint_gamma, and simIK.constraint_pose=simIK.constraint_position|simIK.constraint_orientation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>ikElement</strong>: the handle of the created IK element</div>
<div><strong>simToIkObjectMap</strong>: the mapping of scene objects to IK environment objects</div>
<div><strong>ikToSimObjectMap</strong>: the mapping of IK environment objects to scene objects</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ikElement,list simToIkObjectMap,list ikToSimObjectMap=simIK.addElementFromScene(int environmentHandle,int ikGroup,int baseHandle,int tipHandle,int targetHandle,int constraints)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.addElement">simIK.addElement</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.applyIkEnvironmentToScene" id="simIK.applyIkEnvironmentToScene"></a>simIK.applyIkEnvironmentToScene</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#simIK.syncToSim">simIK.syncToSim</a>.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int result,int reason=simIK.applyIkEnvironmentToScene(int environmentHandle,int ikGroup,bool applyOnlyWhenSuccessful=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the IK environment.</div>
<div><strong>ikGroup</strong>: the handle of the IK group.</div>
<div><strong>applyOnlyWhenSuccessful</strong>: whether computed values should only be applied if computation result is simIK.result_success.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>result</strong>: simIK.result_success if successfull</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int result=simIK.applyIkEnvironmentToScene(int environmentHandle,int ikGroup,bool applyOnlyWhenSuccessful=False)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.applySceneToIkEnvironment" id="simIK.applySceneToIkEnvironment"></a>simIK.applySceneToIkEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#simIK.syncFromSim">simIK.syncFromSim</a> instead</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.applySceneToIkEnvironment(int environmentHandle,int ikGroup)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the IK environment.</div>
<div><strong>ikGroup</strong>: the handle of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.applySceneToIkEnvironment(int environmentHandle,int ikGroup)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.computeGroupJacobian" id="simIK.computeGroupJacobian"></a>simIK.computeGroupJacobian</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the Jacobian and error vector for an IK group</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] jacobian,float[] errorVector=simIK.computeGroupJacobian(int environmentHandle,int ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>ikGroupHandle</strong>: the handle of an IK group</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jacobian</strong>: the jacobian (row major order). Each row corresponds to one constraint in following order: x, y, z, alpha, beta, gamma. Each column corresponds to one joint, from base to tip</div>
<div><strong>errorVector</strong>: the error vector between the target and the tip</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jacobian,list errorVector=simIK.computeGroupJacobian(<span class="apiTableRightLSyn">int environmentHandle,int ikGroupHandle)</span></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.handleGroup">simIK.handleGroup</a>, <a href="#simIK.computeJacobian">simIK.computeJacobian</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.computeJacobian" id="simIK.computeJacobian"></a>simIK.computeJacobian</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the Jacobian and error vector for a kinematic chain</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] jacobian,float[] errorVector=simIK.computeJacobian(int environmentHandle,int baseObject,int lastJoint,int constraints,float[7..12] tipMatrix,float[7..12] targetMatrix=nil,float[7..12] constrBaseMatrix=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>baseObject</strong>: the handle of the base of the kinematic chain, or -1 for the world</div>
<div><strong>lastJoint</strong>: the handle of the last joint in the kinematic chain, when going from base to tip</div>
<div><strong>constraints</strong>: a combination of following is possible: simIK.constraint_x, simIK.constraint_y, simIK.constraint_z, simIK.constraint_alpha_beta, simIK.constraint_gamma. For convenience we also have simIK.constraint_position=simIK.constraint_x|simIK.constraint_y|simIK.constraint_z, simIK.constraint_orientation=simIK.constraint_alpha_beta|simIK.constraint_gamma, and simIK.constraint_pose=simIK.constraint_position|simIK.constraint_orientation</div>
<div><strong>tipMatrix</strong>: the transformation matrix or pose of the tip object, relative to the world</div>
<div><strong>targetMatrix</strong>: the transformation matrix or pose of the target object, relative to the world. Can be nil, in which case the targetPose is the same as the tipPose</div>
<div><strong>constrMaseMatrix</strong>: the transformation matrix or pose that should serve as the reference frame for positional constraints, or nil to use baseHandle as reference frame</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jacobian</strong>: the jacobian (row major order). Each row corresponds to one constraint in following order: x, y, z, alpha, beta, gamma. Each column corresponds to one joint, from base to tip</div>
<div><strong>errorVector</strong>: the error vector between the target and the tip</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jacobian,list errorVector=simIK.computeJacobian(<span class="apiTableRightLSyn">int environmentHandle,int baseObject,int lastJoint,int constraints,list tipMatrix,list targetMatrix=None,list constrBaseMatrix=None)</span></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.handleGroup">simIK.handleGroup</a>, <a href="#simIK.computeGroupJacobian">simIK.computeGroupJacobian</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.createDebugOverlay" id="simIK.createDebugOverlay"></a>simIK.createDebugOverlay</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a visual representation of an IK chain.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int objectHandle=simIK.createDebugOverlay(int environmentHandle,int tipHandle,int baseHandle=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>tipHandle</strong>: the handle of the tip dummy.</div>
<div><strong>baseHandle</strong>: the handle of the base object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>objectHandle</strong>: the handle of the visual overlay object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int objectHandle=simIK.createDebugOverlay(int environmentHandle,int tipHandle,int baseHandle=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.eraseDebugOverlay">simIK.eraseDebugOverlay</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.createDummy" id="simIK.createDummy"></a>simIK.createDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a dummy object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int dummyHandle=simIK.createDummy(int environmentHandle,string dummyName='')</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>dummyName</strong>: the name of the dummy.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>dummyHandle</strong>: the handle of the dummy.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int dummyHandle=simIK.createDummy(int environmentHandle,string dummyName='')</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.doesObjectExist">simIK.doesObjectExist</a>, <a href="#simIK.createJoint">simIK.createJoint</a>, <a href="#simIK.eraseObject">simIK.eraseObject</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.createEnvironment" id="simIK.createEnvironment"></a>simIK.createEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an new IK environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int environmentHandle=simIK.createEnvironment(int flags=0)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>flags</strong>: reserved, keep at 0.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>environmentHandle</strong>: the handle of the newly created environment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int environmentHandle=simIK.createEnvironment()</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.eraseEnvironment">simIK.eraseEnvironment</a>, <a href="#simIK.load">simIK.load</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.createIkGroup" id="simIK.createIkGroup"></a><a name="simIK.createGroup" id="simIK.createGroup"></a>simIK.createGroup</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ikGroupHandle=simIK.createGroup(int environmentHandle,string ikGroupName='')</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ikGroupHandle=simIK.createGroup(int environmentHandle,string ikGroupName='')</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.doesGroupExist">simIK.doesGroupExist</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.createJoint" id="simIK.createJoint"></a>simIK.createJoint</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a joint object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int jointHandle=simIK.createJoint(int environmentHandle,string jointName='')</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointName</strong>: the name of the joint.</div>
<div><strong>jointType</strong>: the type of the joint. Supported types are simIK.jointtype_revolute, simIK.jointtype_prismatic and simIK.jointtype_spherical.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int jointHandle=simIK.createJoint(int environmentHandle,string jointName='')</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.doesObjectExist">simIK.doesObjectExist</a>, <a href="#simIK.createJoint">simIK.createDummy</a>, <a href="#simIK.eraseObject">simIK.eraseObject</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.doesObjectExist" id="simIK.doesObjectExist"></a>simIK.doesObjectExist</p>
<table class="apiTable">

<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks whether an object exists, based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool result=simIK.doesObjectExist(int environmentHandle,string objectName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectName</strong>: the name of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>result</strong>: true if the object exists.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool result=simIK.doesObjectExist(int environmentHandle,string objectName)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.doesIkGroupExist" id="simIK.doesIkGroupExist"></a><a name="simIK.doesGroupExist" id="simIK.doesGroupExist"></a>simIK.doesGroupExist</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks whether an IK group exists, based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool result=simIK.doesGroupExist(int environmentHandle,string ikGroupName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>result</strong>: true if the IK group exists.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool result=simIK.doesGroupExist(int environmentHandle,string ikGroupName)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.duplicateEnvironment" id="simIK.duplicateEnvironment"></a>simIK.duplicateEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Duplicates an IK environment. Useful when operating on an environment while leaving the original environment unchanged.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int newEnvironmentHandle=simIK.duplicateEnvironment(int environmentHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>newEnvironmentHandle</strong>: the handle of the duplicated environment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int newEnvironmentHandle=simIK.duplicateEnvironment(int environmentHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.eraseEnvironment">simIK.eraseEnvironment</a>, <a href="#simIK.createEnvironment">simIK.createEnvironment</a></td>
</tr>
</table>
<br>




<p class="subsectionBar">
<a name="simIK.eraseDebugOverlay" id="simIK.eraseDebugOverlay"></a>simIK.eraseDebugOverlay</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Removes the visual representation of an IK chain.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.eraseDebugOverlay(int objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>objectHandle</strong>: the handle of the visual overlay object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.eraseDebugOverlay(int objectHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createDebugOverlay">simIK.createDebugOverlay</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.eraseEnvironment" id="simIK.eraseEnvironment"></a>simIK.eraseEnvironment</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Erases an IK environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.eraseEnvironment(int environmentHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.eraseEnvironment(int environmentHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.eraseObject" id="simIK.eraseObject"></a>simIK.eraseObject</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Erases an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.eraseObject(int environmentHandle,int objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: handle of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.eraseObject(int environmentHandle,int objectHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a>, <a href="#simIK.createDummy">simIK.createDummy</a>, <a href="#simIK.createJoint">simIK.createJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.findConfig" id="simIK.findConfig"></a>simIK.findConfig</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Searches for a manipulator configuration that matches the target dummy/dummies position/orientation in space. Search is randomized. One should call <a href="#simIK.getAlternateConfigs">simIK.getAlternateConfigs</a> for each returned configuration, if some revolute joints of the manipulator have a range of more than 360 degrees, in order to generate some equivalent poses but alternate configurations. The IK environment remains unchanged.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] jointPositions=simIK.findConfig(int environmentHandle,int ikGroupHandle,int[] jointHandles,float thresholdDist=0.1,float maxTime=0.5,float[4] metric={1,1,1,0.1},func/string validationCallback=nil,auxData=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointHandles</strong>: a table that specifies the joint handles for the joints we wish to retrieve the values calculated by the IK.</div>
<div><strong>thresholdDist</strong>: a distance indicating when IK should be computed in order to try to bring the tip onto the target: since the search algorithm proceeds by generating random configurations, many of them produce a tip pose that is too far from the target pose to run IK successfully. Choosing a large value will result in slow calculations, choosing a small value might produce a smaller subset of solutions. Distance between two poses is calculated using a metric (see metric argument below).</div>
<div><strong>maxTime</strong>: the upper time limit, in seconds, after which the function returns.</div>
<div><strong>metric</strong>: a table to 4 values indicating a metric used to compute pose-pose distances: distance=sqrt((dx*metric[1])^2+(dy*metric[2])^2+(dz*metric[3])^2+(angle*metric[4])^2).</div>
<div><strong>validationCallback</strong>: an optional callback function expressed as a function or a string. The callback function takes as input arguments the proposed joint values (i.e. a configuration) and  <strong>auxData</strong>, and as return value whether the configuration is valid (e.g. is not colliding).</div>
<div><strong>auxData</strong>: auxiliary data that will be handed to the validation callback.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointPositions</strong>: a table that contains the IK calculated joint values, as specified by the jointHandles table, if a valid configuration was found.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jointPositions=simIK.findConfig(int environmentHandle,int ikGroupHandle,list jointHandles,float thresholdDist=0.1,float maxTime=0.5,list metric=[1,1,1,0.1],function/string validationCallback=None,auxData=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.duplicateEnvironment">simIK.duplicateEnvironment</a>, <a href="#simIK.getAlternateConfigs">simIK.getAlternateConfigs</a>, <a href="#simIK.computeJacobian">simIK.computeJacobian</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.generatePath" id="simIK.generatePath"></a>simIK.generatePath</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Generates a path that drives the IK tip onto its IK target, in a straight line (i.e. shortest path in Cartesian space). The function returns a path in the configuration space if the operation was successful. A reason for a non-successful operation can be: there are some forbidden poses/configurations on the way, or some of the configuration points cannot be reached (e.g. out of reach, or due to joint limits). The IK environment remains unchanged.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] configurationList=simIK.generatePath(int environmentHandle,int ikGroupHandle,int[] jointHandles,int tipHandle,int pathPointCount,function/string validationCallback=nil,auxData=nil</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the IK group handle.</div>
<div><strong>jointHandles</strong>: a table that specifies the joint handles for the joints we wish to retrieve the values calculated by the IK.</div>
<div><strong>tipHandle</strong>: the handle of the tip object.</div>
<div><strong>pathPointCount</strong>: the desired number of path points. Each path point contains a joint configuration. A minimum of two path points is required.</div>
<div><strong>validationCallback</strong>: an optional callback function, expressed as a function or string. The callback function takes as input arguments proposed joint values (i.e. a configuration) and  <strong>auxData</strong>, and as return value whether the configuration is valid (e.g. is not colliding).</div>
<div><strong>auxData</strong>: auxiliary data that will be handed to the validation callback.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>configurationList</strong>: a table that contains configurations (in row-major order) that will bring the IK tip onto its IK target.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list configurationList=simIK.generatePath(int environmentHandle,int ikGroupHandle,list jointHandles,int tipHandle,int pathPointCount,function/string validationCallback=None,auxData=None</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.duplicateEnvironment">simIK.duplicateEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getAlternateConfigs" id="simIK.getAlternateConfigs"></a>simIK.getAlternateConfigs</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Useful when called after <a href="#simIK.findConfig">simIK.findConfig</a>: generates alternative manipulator configurations, for a same end-effector pose, for a manipulator that has revolute joints with a range larger than 360 degrees. The original submitted configuration will be part of the returned configurations. The IK environment remains unchanged.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] configurations=simIK.getAlternateConfigs(int environmentHandle,int[] jointHandles,float[] lowLimits=nil,float[] ranges=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandles</strong>: a table with the handles of the manipulator joints.</div>
<div><strong>lowLimits</strong>: a table with joint low limit values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals.</div>
<div><strong>ranges</strong>: a table with joint range values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals. If the range value is 0, then the lowLimit and range values are taken from the joint's properties. If the range value is negative, then the search interval will be centered around the current linear/angular joint position, with an extent of (-range).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>configurations</strong>: a table containing configurations (in row-major order) that are equivalent to the specified inputConfig, in terms of end-effector pose.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list configurations=simIK.getAlternateConfigs(int environmentHandle,list jointHandles,list lowLimits=None,list ranges=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.findConfig">simIK.findConfig</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getConfigForTipPose" id="simIK.getConfigForTipPose"></a>simIK.getConfigForTipPose</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use simIK.findConfig instead.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] jointPositions=simIK.getConfigForTipPose(int environmentHandle,int ikGroupHandle,int[] jointHandles,float thresholdDist=0.1,float maxTime=0.5,float[4] metric={1,1,1,0.1},function validationCallback=nil,auxData=nil,int[] jointOptions={},float[] lowLimits={},float[] ranges={})</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>jointHandles</strong>: a table that specifies the joint handles for the joints we wish to retrieve the values calculated by the IK.</div>
<div><strong>thresholdDist</strong>: a distance indicating when IK should be computed in order to try to bring the tip onto the target: since the search algorithm proceeds by generating random configurations, many of them produce a tip pose that is too far from the target pose to run IK successfully. Choosing a large value will result in slow calculations, choosing a small value might produce a smaller subset of solutions. Distance between two poses is calculated using a metric (see metric argument below).</div>
<div><strong>maxTime</strong>: the upper time limit, in seconds, after which the function returns.</div>
<div><strong>metric</strong>: a table to 4 values indicating a metric used to compute pose-pose distances: distance=sqrt((dx*metric[1])^2+(dy*metric[2])^2+(dz*metric[3])^2+(angle*metric[4])^2).</div>
<div><strong>validationCallback</strong>: an optional callback function. The callback function takes as input arguments the proposed joint values (i.e. a configuration) and  <strong>auxData</strong>, and as return value whether the configuration is valid (e.g. is not colliding).</div>
<div><strong>auxData</strong>: auxiliary data that will be handed to the validation callback.</div>
<div><strong>jointOptions</strong>: a table with bit-coded values corresponding to each specified joint handle. Bit 0 (i.e. 1) indicates the corresponding joint is dependent of another joint.</div>
<div><strong>lowLimits</strong>: a table with joint low limit values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals.</div>
<div><strong>ranges</strong>: a table with joint range values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals. If the range value is 0, then the lowLimit and range values are taken from the joint's properties. If the range value is negative, then the search interval will be centered around the current linear/angular joint position, with an extent of (-range).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointPositions</strong>: a table that contains the IK calculated joint values, as specified by the jointHandles table, if a valid configuration was found.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jointPositions=simIK.getConfigForTipPose(int environmentHandle,int ikGroupHandle,list jointHandles,float thresholdDist=0.1,float maxTime=0.5,list metric=[1,1,1,0.1],function validationCallback=None,auxData=None,list jointOptions=[],list lowLimits=[],list ranges=[])</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.duplicateEnvironment">simIK.duplicateEnvironment</a>, <a href="#simIK.getAlternateConfigs">simIK.getAlternateConfigs</a>, <a href="#simIK.computeJacobian">simIK.computeJacobian</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkElementBase" id="simIK.getIkElementBase"></a><a name="simIK.getElementBase" id="simIK.getElementBase"></a>simIK.getElementBase</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the base object of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int baseHandle,int constraintsBaseHandle=simIK.getElementBase(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>baseHandle</strong>: the handle of the base object, or -1 if the world is the base.</div>
<div><strong>constraintsBaseHandle</strong>: the handle of the constraints base object, relative to which the constraints are specified. Returns -1 if the constraints are relative to the base object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int baseHandle,int constraintsBaseHandle=simIK.getElementBase(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setElementBase">simIK.setElementBase</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkElementConstraints" id="simIK.getIkElementConstraints"></a><a name="simIK.getElementConstraints" id="simIK.getElementConstraints"></a>simIK.getElementConstraints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the constraints of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int constraints=simIK.getElementConstraints(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>constraints</strong>: the constraints. A bit-combination of following is possible: simIK.constraint_x, simIK.constraint_y, simIK.constraint_z, simIK.constraint_alpha_beta, simIK.constraint_gamma.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int constraints=simIK.getElementConstraints(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setElementConstraints">simIK.setElementConstraints</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkElementFlags" id="simIK.getIkElementFlags"></a><a name="simIK.getElementFlags" id="simIK.getElementFlags"></a>simIK.getElementFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves various flags of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int flags=simIK.getElementFlags(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>flags</strong>: bit-coded flags: bit0 set(1)=the enabled state of the ik element.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int flags=simIK.getElementFlags(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setElementFlags">simIK.setElementFlags</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkElementPrecision" id="simIK.getIkElementPrecision"></a><a name="simIK.getElementPrecision" id="simIK.getElementPrecision"></a>simIK.getElementPrecision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the precision settings of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[2] precision=simIK.getElementPrecision(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>precision</strong>: a table with the linear and angular precision.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list precision=simIK.getElementPrecision(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setElementPrecision">simIK.setElementPrecision</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkElementWeights" id="simIK.getIkElementWeights"></a><a name="simIK.getElementWeights" id="simIK.getElementWeights"></a>simIK.getElementWeights</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the desired linear and angular resolution weights of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[3] weights=simIK.getElementWeights(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>weights</strong>: a table with the linear, angular and overall resolution weights.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list weights=simIK.getElementWeights(int environmentHandle,int ikGroupHandle,int elementHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setElementWeights">simIK.setElementWeights</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkGroupCalculation" id="simIK.getIkGroupCalculation"></a><a name="simIK.getGroupCalculation" id="simIK.getGroupCalculation"></a>simIK.getGroupCalculation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves calculation properties for an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int method,float damping,int maxIterations=simIK.getGroupCalculation(int environmentHandle,int ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>method</strong>: the resolution method. Possible values are simIK.method_pseudo_inverse (features a tiny bit of hard-coded damping), simIK.method_undamped_pseudo_inverse, simIK.method_damped_least_squares and simIK.method_jacobian_transpose.</div>
<div><strong>damping</strong>: the damping, in case the resolution method is simIK.method_damped_least_squares.</div>
<div><strong>maxIterations</strong>: the maximum number of iterations.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int method,float damping,int maxIterations=simIK.getGroupCalculation(int environmentHandle,int ikGroupHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setGroupCalculation">simIK.setGroupCalculation</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkGroupFlags" id="simIK.getIkGroupFlags"></a><a name="simIK.getGroupFlags" id="simIK.getGroupFlags"></a>simIK.getGroupFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves flags of an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int flags=simIK.getGroupFlags(int environmentHandle,int ikGroupHandle))</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>flags</strong>: the flags of the IK group, bit-coded:</div>
<div class="tabTab">simIK.group_enabled: the group's enabled state</div>
<div class="tabTab">simIK.group_ignoremaxsteps: the joints' max step sizes are ignored. Otherwise, when detected, an interpolation factor (originally at 1.0) is successively divided by 2.0 until the max. step sizes are respected</div>
<div class="tabTab">simIK.group_restoreonbadlintol: the IK world state is left untouched if the linear precision is not reached</div>
<div class="tabTab">simIK.group_restoreonbadangtol: the IK world state is left untouched if the angular precision is not reached</div>
<div class="tabTab">simIK.group_avoidlimits: joint limits are actively avoided</div>
<div class="tabTab">simIK.group_stoponlimithit: calculation ends when a joint limit is hit</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int flags=simIK.getGroupFlags(int environmentHandle,int ikGroupHandle))</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setGroupFlags">simIK.setGroupFlags</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkGroupHandle" id="simIK.getIkGroupHandle"></a><a name="simIK.getGroupHandle" id="simIK.getGroupHandle"></a>simIK.getGroupHandle</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of an IK group based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ikGroupHandle=simIK.getGroupHandle(int environmentHandle,string ikGroupName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupName</strong>: the name of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ikGroupHandle=simIK.getGroupHandle(int environmentHandle,string ikGroupName)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.doesGroupExist">simIK.doesGroupExist</a>, <a href="#simIK.createGroup">simIK.createGroup</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getIkGroupJointLimitHits" id="simIK.getIkGroupJointLimitHits"></a><a name="simIK.getGroupJointLimitHits" id="simIK.getGroupJointLimitHits"></a>simIK.getGroupJointLimitHits</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks which joints of an IK group hit a limit last time that IK group was handled</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int[] jointHandles,float[] underOrOvershots=simIK.getGroupJointLimitHits(int environmentHandle,int ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointHandles</strong>: the joint handles that that had joint limits under- or overshot</div>
<div><strong>underOrOvershots</strong>: the corresponding under- or overshots, for each of the jointHandles</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jointHandles,list underOrOvershots=simIK.getGroupJointLimitHits(int environmentHandle,int ikGroupHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.setGroupFlags">simIK.setGroupFlags</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.getGroupJoints" id="simIK.getGroupJoints"></a>simIK.getGroupJoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Returns the joint handles involved in the IK group calculation, i.e. one handle per Jacobian column (except with revolute joints that have 3 corresponding Jacobian columns)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int[] jointHandles=simIK.getGroupJoints(int environmentHandle,int ikGroupHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointHandles</strong>: the joint handles</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list jointHandles=simIK.getGroupJoints(int environmentHandle,int ikGroupHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>





<p class="subsectionBar">
<a name="simIK.getJointDependency" id="simIK.getJointDependency"></a>simIK.getJointDependency</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves information about a possible joint dependency.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int depJointHandle,float offset,float mult=simIK.getJointDependency(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>depJointHandle</strong>: the handle of the dependency joint.</div>
<div><strong>offset</strong>: the offset. We have linear/angular joint position = dependency linear/angular joint position * mult + offset.</div>
<div><strong>mult</strong>: the multiplication factor. We have linear/angular joint position = dependency linear/angular joint position * mult + offset.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int depJointHandle,float offset,float mult=simIK.getJointDependency(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointDependency">simIK.setJointDependency</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointIkWeight" id="simIK.getJointIkWeight"></a><a name="simIK.getJointWeight" id="simIK.getJointWeight"></a>simIK.getJointWeight</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the IK weight of a joint, i.e. the weight it has during IK resolution.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float weight=simIK.getJointWeight(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>weight</strong>: the IK weight.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float weight=simIK.getJointWeight(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointWeight">simIK.setJointWeight</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointInterval" id="simIK.getJointInterval"></a>simIK.getJointInterval</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint limits.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool cyclic,float[2] interval=simIK.getJointInterval(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>cyclic</strong>: whether the joint is cyclic (has no limits).</div>
<div><strong>interval</strong>: a table with two values: the joint lower limit, and the joint range (i.e. joint upper limit = joint lower limit + joint range)</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool cyclic,list interval=simIK.getJointInterval(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointInterval">simIK.setJointInterval</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointLimitMargin" id="simIK.getJointLimitMargin"></a>simIK.getJointLimitMargin</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the limit margin of a joint, i.e. the threshold that will be used to counteract on joint limit violation during IK resolution, if the appropriate IK group flag was set</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float margin=simIK.getJointLimitMargin(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>margin</strong>: the margin</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float margin=simIK.getJointLimitMargin(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointLimitMargin">simIK.setJointLimitMargin</a>, <a href="#simIK.getGroupFlags">simIK.getGroupFlags</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointMatrix" id="simIK.getJointMatrix"></a>simIK.getJointMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the intrinsic transformation matrix of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[12] matrix=simIK.getJointMatrix(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>matrix</strong>: a table of 12 numbers representing the transformation matrix (the last row of the 4x4 matrix (0,0,0,1) is not returned).</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list matrix=simIK.getJointMatrix(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setSphericalJointMatrix">simIK.setSphericalJointMatrix</a>, <a href="#simIK.getJointPosition">simIK.getJointPosition</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointMaxStepSize" id="simIK.getJointMaxStepSize"></a>simIK.getJointMaxStepSize</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the maximum step size of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float stepSize=simIK.getJointMaxStepSize(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>stepSize</strong>: the maximum step size.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float stepSize=simIK.getJointMaxStepSize(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointMaxStepSize">simIK.setJointMaxStepSize</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointMode" id="simIK.getJointMode"></a>simIK.getJointMode</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint mode.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int jointMode=simIK.getJointMode(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointMode</strong>: the joint mode. Possible values are: simIK.jointmode_passive, simIK.jointmode_ik</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int jointMode=simIK.getJointMode(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointMode">simIK.setJointMode</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointPosition" id="simIK.getJointPosition"></a>simIK.getJointPosition</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the position (linear or angular) of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float position=simIK.getJointPosition(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>position</strong>: the position.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float position=simIK.getJointPosition(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.getJointMatrix">simIK.getJointMatrix</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointScrewLead" id="simIK.getJointScrewLead"></a><a name="simIK.getJointScrewPitch" id="simIK.getJointScrewPitch"></a>simIK.getJointScrewLead</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the screw lead of a revolute joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float lead=simIK.getJointScrewLead(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>lead</strong>: the screw lead of the joint. A lead value of zero represents a revolute joint, a value different from zero represents a screw.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float lead=simIK.getJointScrewLead(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setJointScrewLead">simIK.setJointScrewLead</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointTransformation" id="simIK.getJointTransformation"></a>simIK.getJointTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the intrinsic transformation of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[3] position,float[4] quaternion,float[3] euler=simIK.getJointTransformation(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>position</strong>: the translation of the joint.</div>
<div><strong>quaternion</strong>: the rotation of the joint, expressed as quaternion (x,y,z,w).</div>
<div><strong>euler</strong>: the rotation of the joint, expressed as Euler angles (alpha,beta,gamma).</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list position,list quaternion,list euler=simIK.getJointTransformation(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setSphericalJointRotation">simIK.setSphericalJointRotation</a>, <a href="#simIK.getJointPosition">simIK.getJointPosition</a>, <a href="#simIK.getJointMatrix">simIK.getJointMatrix</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getJointType" id="simIK.getJointType"></a>simIK.getJointType</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the joint type.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int jointType=simIK.getJointType(int environmentHandle,int jointHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>jointType</strong>: the joint type. Possible values are: simIK.jointtype_revolute, simIK.jointtype_prismatic and simIK.jointtype_spherical</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int jointType=simIK.getJointType(int environmentHandle,int jointHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createJoint">simIK.createJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getLinkedDummy" id="simIK.getLinkedDummy"></a>simIK.getLinkedDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#simIK.getTargetDummy">simIK.getTargetDummy</a> instead</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int linkedDummyHandle=simIK.getLinkedDummy(int environmentHandle,int dummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>dummyHandle</strong>: the handle of the dummy object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>linkedDummyHandle</strong>: the handle of the linked dummy object. Is -1 if no dummy object is linked to this one.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int linkedDummyHandle=simIK.getLinkedDummy(int environmentHandle,int dummyHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setLinkedDummy">simIK.setLinkedDummy</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getObjectHandle" id="simIK.getObjectHandle"></a>simIK.getObjectHandle</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of an object based on its name.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int objectHandle=simIK.getObjectHandle(int environmentHandle,string objectName)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectName</strong>: the name of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>objectHandle</strong>: the object handle.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int objectHandle=simIK.getObjectHandle(int environmentHandle,string objectName)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.doesObjectExist">simIK.doesObjectExist</a>, <a href="#simIK.createDummy">simIK.createDummy</a>, <a href="#simIK.createJoint">simIK.createJoint</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getObjectMatrix" id="simIK.getObjectMatrix"></a>simIK.getObjectMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the transformation matrix of an object. If the object is a joint object, the matrix does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[12] matrix=simIK.getObjectMatrix(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which we want the matrix expressed. Otherwise, specify simIK.handle_world if you want the absolute matrix, or simIK.handle_parent if you want the matrix relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>matrix</strong>: a table of 12 numbers representing the transformation matrix (the last row of the 4x4 matrix (0,0,0,1) is not returned)</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list matrix=simIK.getObjectMatrix(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setObjectMatrix">simIK.setObjectMatrix</a>, <a href="#simIK.getObjectPose">simIK.getObjectPose</a>,<a href="#simIK.getObjectTransformation">simIK.getObjectTransformation</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getObjectParent" id="simIK.getObjectParent"></a>simIK.getObjectParent</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves an object's parent handle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int parentObjectHandle=simIK.getObjectParent(int environmentHandle,int objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>parentObjectHandle</strong>: the returned handle of the parent, or -1 if the object has no parent.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int parentObjectHandle=simIK.getObjectParent(int environmentHandle,int objectHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setObjectParent">simIK.setObjectParent</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.getObjectPose" id="simIK.getObjectPose"></a>simIK.getObjectPose</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the pose (position and quaternion) of an object. If the object is a joint object, the pose does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[7] pose=simIK.getObjectPose(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which we want the pose expressed. Otherwise, specify simIK.handle_world if you want the absolute pose, or simIK.handle_parent if you want the pose relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>pose</strong>: the position and quaternion of the object (x,y,z,qx,qy,qz,qw).</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list pose=simIK.getObjectPose(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setObjectPose">simIK.setObjectPose</a>, <a href="#simIK.getObjectTransformation">simIK.getObjectTransformation</a>, <a href="#simIK.getObjectMatrix">simIK.getObjectMatrix</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.getObjects" id="simIK.getObjects"></a>simIK.getObjects</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Allows to loop through all objects in the environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int objectHandle,string objectName,bool isJoint,int jointType=simIK.getObjects(int environmentHandle,int index)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>index</strong>: the zero-based index. Start at 0, and increment until there is no return values anymore, in order to loop through all objects in the environment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>objectHandle</strong>: the handle of the object, or nil if there is no object at the specified index.</div>
<div><strong>objectName</strong>: the name of the object.</div>
<div><strong>isJoint</strong>: whether the object is a joint.</div>
<div><strong>jointType</strong>: the type of joint, if the object at the specified index is a joint. Possible values are simIK.jointtype_revolute, simIK.jointtype_prismatic or simIK.jointtype_spherical.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int objectHandle,string objectName,bool isJoint,int jointType=simIK.getObjects(int environmentHandle,int index)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.getObjectHandle">simIK.getObjectHandle</a>, <a href="#simIK.doesObjectExist">simIK.doesObjectExist</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.getObjectTransformation" id="simIK.getObjectTransformation"></a>simIK.getObjectTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the transformation (position and quaternion/euler angles) of an object. If the object is a joint object, the transformation does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[3] position,float[4] quaternion,float[3] euler=simIK.getObjectTransformation(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which we want the transformation expressed. Otherwise, specify simIK.handle_world if you want the absolute transformation, or simIK.handle_parent if you want the transformation relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>position</strong>: the position of the object.</div>
<div><strong>quaternion</strong>: the orientation of the object, expressed as quaternion (x,y,z,w).</div>
<div><strong>euler</strong>: the orientation of the object, expressed as Euler angles (alpha,beta,gamma).</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list position,list quaternion,list euler=simIK.getObjectTransformation(int environmentHandle,int objectHandle,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setObjectTransformation">simIK.setObjectTransformation</a>, <a href="#simIK.getObjectPose">simIK.getObjectPose</a>, <a href="#simIK.getObjectMatrix">simIK.getObjectMatrix</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.getObjectType" id="simIK.getObjectType"></a>simIK.getObjectType</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the type of an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int objectType=simIK.getObjectType(int environmentHandle,int objectHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>objectType</strong>: the returned type of the object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int objectType=simIK.getObjectType(int environmentHandle,int objectHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.getTargetDummy" id="simIK.getTargetDummy"></a>simIK.getTargetDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the handle of the target dummy associated with a tip dummy</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int targetDummyHandle=simIK.getTargetDummy(int environmentHandle,int tipDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>tipDummyHandle</strong>: the handle of the tip dummy</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>targetDummyHandle</strong>: the handle of the target dummy. Is -1 if no target dummy is associated with the tip dummy</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int targetDummyHandle=simIK.getTargetDummy(int environmentHandle,int tipDummyHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.setTargetDummy">simIK.setTargetDummy</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.handleIkGroup" id="simIK.handleIkGroup"></a><a name="simIK.handleGroup" id="simIK.handleGroup"></a>simIK.handleGroup</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Handles (i.e. computes/resolves) an IK group. Convenience function for simIK.handleIkGroups(ikEnv,{ikGroupHandle},..)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int result,int flags,float[2] precision=simIK.handleGroup(int environmentHandle,int ikGroupHandle,map options={})</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group</div>
<div><strong>options</strong>: options:</div>
<div class=tabTab>options.syncWorlds: if true, then calculation will be preceeded by simIK.syncFromSim and followed by simIK.syncToSim</div>
<div class=tabTab>options.allowError: if true, and options.syncWorlds is true too, then calculation result will be applied to the scene, even if tip/target pairs are not within tolerance</div>
<div class=tabTab>options.debug: bit0 is set, then a visual representation of the IK group will be made</div>
<div class=tabTab>options.callback: a callback function that allows to inspect and manipulate the Jacobian. It also allows to directly perform joint valiation calculations while skipping internal computations:</div>
<div class=tabTab>outData=callbackFunction(inData)</div>
<div>inData.jacobian: a Matrix object representing the Jacobian</div>
<div>inData.e: a Vector object representing the error vector</div>
<div>inData.rows: a table describing the jacobian rows</div>
<div>inData.cols: a table describing the jacobian cols</div>
<div></div>
<div>outData.jacobian: an optional Matrix object representing the Jacobian to use in subsequent calculations. If not provided, then the original inData.jacobian is used</div>
<div>outData.e: an optional Vector object representing the error vector to use in subsequent calculations. If not provided, then the original inData.e is used</div>
<div>outData.dq: an optional Vector object representing the joint variation to apply. If provided, then internal Jacobian calculations (i.e. Jacobian pseudo-inverse) will be skipped)</div>
<div>outData.jacobianPinv: an optional Matrix object representing the jacobian pseudo-inverse. If provided (and dq is not provided), then internal Jacobian calculations will be skipped and following executed instead: dq=outData.jacobianPinv*e)</div>

</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>result</strong>: simIK.result_success, if successful</div>
<div><strong>reason</strong>: bit-coded flags: simIK.calc_notperformed, simIK.calc_cannotinvert, simIK.calc_notwithintolerance, simIK.calc_stepstoobig, simIK.calc_limithit</div>
<div><strong>precision</strong>: 2 values indicating the largest linear and angular distance between all tip-target pairs</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int result,int flags,list precision=simIK.handleGroup(int environmentHandle,int ikGroupHandle,map options=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.handleGroups">simIK.handleGroups</a>,<a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.computeJacobian">simIK.computeJacobian</a>, <a href="#simIK.findConfig">simIK.findConfig</a></td>
</tr>
</table>
<br>











<p class="subsectionBar">
<a name="simIK.handleGroups" id="simIK.handleGroups"></a>simIK.handleGroups</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Handles (i.e. computes/resolves) one or several IK groups</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int result,int flags,float[2] precision=simIK.handleGroups(int environmentHandle,int[] ikGroupHandles,map options={})</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>ikGroupHandles</strong>: the handles of the IK groups. If one handle is specified, then a simple IK calculation is performed. If more than one handle is specified, then a projected IK computation is performed, where each group calculation result is projected into the previous group's null space, i.e. dq=dq0+NP0*(dq1+NP1*(dq2+NP2*(...))), where dqi is the result of i-th task's IK (i.e. typically J#*e), and NPi is the i-th task's I-J#*J</div>
<div><strong>options</strong>: options:</div>
<div class=tabTab>options.syncWorlds: if true, then calculation will be preceeded by simIK.syncFromSim and followed by simIK.syncToSim</div>
<div class=tabTab>options.allowError: if true, and options.syncWorlds is true too, then calculation result will be applied to the scene, even if tip/target pairs are not within tolerance</div>
<div class=tabTab>options.debug: if bit0 is set, then a visual representation of the IK groups will be made</div>
<div class=tabTab>options.callback: a callback function that allows to inspect and manipulate the Jacobian. It also allows to directly perform joint valiation calculations while skipping internal computations:</div>
<div class=tabTab>outData=callbackFunction(inData)</div>
<div>inData.jacobian: a Matrix object representing the Jacobian</div>
<div>inData.e: a Vector object representing the error vector</div>
<div>inData.rows: a table describing the jacobian rows</div>
<div>inData.cols: a table describing the jacobian cols</div>
<div></div>
<div>outData.jacobian: an optional Matrix object representing the Jacobian to use in subsequent calculations. If not provided, then the original inData.jacobian is used</div>
<div>outData.e: an optional Vector object representing the error vector to use in subsequent calculations. If not provided, then the original inData.e is used</div>
<div>outData.dq: an optional Vector object representing the joint variation to apply. If provided, then internal Jacobian calculations (i.e. Jacobian pseudo-inverse) will be skipped)</div>
<div>outData.jacobianPinv: an optional Matrix object representing the jacobian pseudo-inverse. If provided (and dq is not provided), then internal Jacobian calculations will be skipped and following executed instead: dq=outData.jacobianPinv*e)</div>

</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>result</strong>: simIK.result_success, if successful</div>
<div><strong>reason</strong>: bit-coded flags: simIK.calc_notperformed, simIK.calc_cannotinvert, simIK.calc_notwithintolerance, simIK.calc_stepstoobig, simIK.calc_limithit</div>
<div><strong>precision</strong>: 2 values indicating the largest linear and angular distance between all tip-target pairs</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int result,int flags,list precision=simIK.handleGroups(int environmentHandle,int[] ikGroupHandles,map options=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.handleGroup">simIK.handleGroup</a>,<a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.computeJacobian">simIK.computeJacobian</a>, <a href="#simIK.findConfig">simIK.findConfig</a></td>
</tr>
</table>
<br>











<p class="subsectionBar">
<a name="simIK.load" id="simIK.load"></a>simIK.load</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Loads kinematic content previously exported in the CoppeliaSim application. Make sure that the environment is empty before calling this function.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.load(int environmentHandle,buffer data)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>data</strong>: a buffer with the kinematic content.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.load(int environmentHandle,bytes data)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.save">simIK.save</a>, <a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.eraseEnvironment">simIK.eraseEnvironment</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.save" id="simIK.save"></a>simIK.save</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Saves the kinematic content of an IK environment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">buffer data=simIK.save(int environmentHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
<div><strong>data</strong>: the exported data.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bytes data=simIK.save(int environmentHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.load">simIK.load</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkElementBase" id="simIK.setIkElementBase"></a><a name="simIK.setElementBase" id="simIK.setElementBase"></a>simIK.setElementBase</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the base object of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setElementBase(int environmentHandle,int ikGroupHandle,int elementHandle,int baseHandle,int constraintsBaseHandle=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>baseHandle</strong>: the handle of the base object, or -1 if the world is the base.</div>
<div><strong>constraintsBaseHandle</strong>: the handle of the constraints base object, relative to which the constraints are specified. Set to -1 to have the constraints relative to the base object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setElementBase(int environmentHandle,int ikGroupHandle,int elementHandle,int baseHandle,int constraintsBaseHandle=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getElementBase">simIK.getElementBase</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkElementConstraints" id="simIK.setIkElementConstraints"></a><a name="simIK.setElementConstraints" id="simIK.setElementConstraints"></a>simIK.setElementConstraints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the constraints of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setElementConstraints(int environmentHandle,int ikGroupHandle,int elementHandle,int constraints)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>constraints</strong>: the constraints. Bit-combine following: simIK.constraint_x, simIK.constraint_y, simIK.constraint_z, simIK.constraint_alpha_beta, simIK.constraint_gamma (simIK.constraint_gamma should only be set if simIK.constraint_alpha_beta is also set). For convenience we also have simIK.constraint_position=simIK.constraint_x|simIK.constraint_y|simIK.constraint_z, simIK.constraint_orientation=simIK.constraint_alpha_beta|simIK.constraint_gamma, and simIK.constraint_pose=simIK.constraint_position|simIK.constraint_orientation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setElementConstraints(int environmentHandle,int ikGroupHandle,int elementHandle,int constraints)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getElementConstraints">simIK.getElementConstraints</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkElementFlags" id="simIK.setIkElementFlags"></a><a name="simIK.setElementFlags" id="simIK.setElementFlags"></a>simIK.setElementFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets various flags of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setElementFlags(int environmentHandle,int ikGroupHandle,int elementHandle,int flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>flags</strong>: bit-coded flags: bit0 set (1)=the enabled state of the IK element.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setElementFlags(int environmentHandle,int ikGroupHandle,int elementHandle,int flags)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getElementFlags">simIK.getElementFlags</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkElementPrecision" id="simIK.setIkElementPrecision"></a><a name="simIK.setElementPrecision" id="simIK.setElementPrecision"></a>simIK.setElementPrecision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the desired precision of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setElementPrecision(int environmentHandle,int ikGroupHandle,int elementHandle,float[2] precision)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>precision</strong>: a table with two values for the linear and angular precision.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setElementPrecision(int environmentHandle,int ikGroupHandle,int elementHandle,list precision)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getElementPrecision">simIK.getElementPrecision</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkElementWeights" id="simIK.setIkElementWeights"></a><a name="simIK.setElementWeights" id="simIK.setElementWeights"></a>simIK.setElementWeights</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the desired linear and angular resolution weights of an IK element.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setElementWeights(int environmentHandle,int ikGroupHandle,int elementHandle,float[3] weights)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>elementHandle</strong>: the IK element handle, or X, where X=handleOfTipDummy+simIK.handleflag_tipdummy (if several IK elements with the same tip dummy exist, then the first encountered will be selected).</div>
<div><strong>weights</strong>: a table with three values for the linear, angular and overall resolution weight.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setElementWeights(int environmentHandle,int ikGroupHandle,int elementHandle,list weights)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getElementWeights">simIK.getElementWeights</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkGroupCalculation" id="simIK.setIkGroupCalculation"></a><a name="simIK.setGroupCalculation" id="simIK.setGroupCalculation"></a>simIK.setGroupCalculation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets calculation properties for an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setGroupCalculation(int environmentHandle,int ikGroupHandle,int method,float damping,float maxIterations)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>method</strong>: the resolution method. Possible values are simIK.method_pseudo_inverse (features a tiny bit of hard-coded damping), simIK.method_undamped_pseudo_inverse, simIK.method_damped_least_squares and simIK.method_jacobian_transpose.</div>
<div><strong>damping</strong>: the damping, in case the resolution method is simIK.method_damped_least_squares.</div>
<div><strong>maxIterations</strong>: the maximum number of iterations.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setGroupCalculation(int environmentHandle,int ikGroupHandle,int method,float damping,float maxIterations)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getGroupCalculation">simIK.getGroupCalculation</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setIkGroupFlags" id="simIK.setIkGroupFlags"></a><a name="simIK.setGroupFlags" id="simIK.setGroupFlags"></a>simIK.setGroupFlags</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets flags of an IK group.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setGroupFlags(int environmentHandle,int ikGroupHandle,int flags)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>ikGroupHandle</strong>: the handle of the IK group.</div>
<div><strong>flags</strong>: the flags of the IK group, bit-coded:</div>
<div class="tabTab">simIK.group_enabled: the group's enabled state</div>
<div class="tabTab">simIK.group_ignoremaxsteps: the joints' max step sizes are ignored. Otherwise, when detected, an interpolation factor (originally at 1.0) is successively divided by 2.0 until the max. step sizes are respected</div>
<div class="tabTab">simIK.group_restoreonbadlintol: the IK world state is left untouched if the linear precision is not reached</div>
<div class="tabTab">simIK.group_restoreonbadangtol: the IK world state is left untouched if the angular precision is not reached</div>
<div class="tabTab">simIK.group_avoidlimits: joint limits are actively avoided</div>
<div class="tabTab">simIK.group_stoponlimithit: calculation ends when a joint limit is hit</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setGroupFlags(int environmentHandle,int ikGroupHandle,int flags)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getGroupFlags">simIK.getGroupFlags</a>, <a href="#simIK.getGroupHandle">simIK.getGroupHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointDependency" id="simIK.setJointDependency"></a>simIK.setJointDependency</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets information about a possible dependent joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointDependency(int environmentHandle,int jointHandle,int depJointHandle,float offset=0,float mult=1,func callback=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>depJointHandle</strong>: the handle of the joint, this joint is dependent of. -1 to disable.</div>
<div><strong>offset</strong>: the offset. We have linear/angular joint position = dependency linear/angular joint position * mult + offset</div>
<div><strong>mult</strong>: the multiplication factor. We have linear/angular joint position = dependency linear/angular joint position * mult + offset</div>
<div><strong>callback</strong>: an optional callback that allows to provide a custom dependency function:</div>
<div>float result=callbackFunction(int ikEnv,int slaveJointHandle,float masterJointPosition)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointDependency(int environmentHandle,int jointHandle,int depJointHandle,float offset=0,float mult=1,string callback=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointDependency">simIK.getJointDependency</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointIkWeight" id="simIK.setJointIkWeight"></a><a name="simIK.setJointWeight" id="simIK.setJointWeight"></a>simIK.setJointWeight</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the IK weight of a joint, i.e. the weight it has during IK resolution.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointWeight(int environmentHandle,int jointHandle,float weight)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>weight</strong>: the IK weight.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointWeight(int environmentHandle,int jointHandle,float weight)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointWeight">simIK.getJointWeight</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointLimitMargin" id="simIK.setJointLimitMargin"></a>simIK.setJointLimitMargin</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the limit margin of a joint, i.e. the threshold that will be used to counteract on joint limit violation during IK resolution, if the appropriate IK group flag was set</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointLimitMargin(int environmentHandle,int jointHandle,float margin)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>margin</strong>: the margin</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointLimitMargin(int environmentHandle,int jointHandle,float margin)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointLimitMargin">simIK.getJointLimitMargin</a>, <a href="#simIK.getGroupFlags">simIK.getGroupFlags</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointInterval" id="simIK.setJointInterval"></a>simIK.setJointInterval</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the joint limits.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointInterval(int environmentHandle,int jointHandle,bool cyclic,float[2] interval={})</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>cyclic</strong>: whether the joint is cyclic (has no limits). Only revolute joints can be cyclic.</div>
<div><strong>interval</strong>: a table with two values: the joint lower limit, and the joint range (i.e. joint upper limit = joint lower limit + joint range)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointInterval(int environmentHandle,int jointHandle,bool cyclic,list interval=[])</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointInterval">simIK.getJointInterval</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointMaxStepSize" id="simIK.setJointMaxStepSize"></a>simIK.setJointMaxStepSize</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the maximum step size of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointMaxStepSize(int environmentHandle,int jointHandle,float stepSize)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>stepSize</strong>: the maximum step size.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointMaxStepSize(int environmentHandle,int jointHandle,float stepSize)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointMaxStepSize">simIK.getJointMaxStepSize</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointMode" id="simIK.setJointMode"></a>simIK.setJointMode</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the joint mode.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointMode(int environmentHandle,int jointHandle,int jointMode)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>jointMode</strong>: the joint mode. Allowed values are: simIK.jointmode_passive, simIK.jointmode_ik</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointMode(int environmentHandle,int jointHandle,int jointMode)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointMode">simIK.getJointMode</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointPosition" id="simIK.setJointPosition"></a>simIK.setJointPosition</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the position (linear or angular) of a joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointPosition(int environmentHandle,int jointHandle,float position)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>position</strong>: the position.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointPosition(int environmentHandle,int jointHandle,float position)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointPosition">simIK.getJointPosition</a>, <a href="#simIK.setSphericalJointMatrix">simIK.setSphericalJointMatrix</a>, <a href="#simIK.setSphericalJointRotation">simIK.setSphericalJointRotation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setJointScrewLead" id="simIK.setJointScrewLead"></a><a name="simIK.setJointScrewPitch" id="simIK.setJointScrewPitch"></a>simIK.setJointScrewLead</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the screw lead, in case of a revolute joint.</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setJointScrewLead(int environmentHandle,int jointHandle,float lead)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>lead</strong>: the screw lead of the joint. A lead value of zero represents a revolute joint, a value different from zero represents a screw.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setJointScrewLead(int environmentHandle,int jointHandle,float lead)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointScrewLead">simIK.getJointScrewLead</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setLinkedDummy" id="simIK.setLinkedDummy"></a>simIK.setLinkedDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Deprecated. Use <a href="#simIK.setTargetDummy">simIK.setTargetDummy instead</a></td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setLinkedDummy(int environmentHandle,int dummyHandle,int linkedDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>dummyHandle</strong>: the handle of the dummy object.</div>
<div><strong>linkedDummyHandle</strong>: the handle of the dummy object to be linked, or -1 to detach this dummy object from a linked dummy object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setLinkedDummy(int environmentHandle,int dummyHandle,int linkedDummyHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getLinkedDummy">simIK.getLinkedDummy</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setObjectMatrix" id="simIK.setObjectMatrix"></a>simIK.setObjectMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the transformation matrix of an object. If the object is a joint object, the matrix does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setObjectMatrix(int environmentHandle,int objectHandle,float[12] matrix,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>matrix</strong>: a table of 12 values representing the transformation matrix (the last row of the 4x4 matrix (0,0,0,1) is omitted)</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which the matrix is expressed. Otherwise, specify simIK.handle_world if you specify the absolute matrix, or simIK.handle_parent if you specify the matrix relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setObjectMatrix(int environmentHandle,int objectHandle,list matrix,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectMatrix">simIK.getObjectMatrix</a>, <a href="#simIK.setObjectPose">simIK.setObjectPose</a>, <a href="#simIK.setObjectTransformation">simIK.setObjectTransformation</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setObjectParent" id="simIK.setObjectParent"></a>simIK.setObjectParent</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the parent of an object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setObjectParent(int environmentHandle,int objectHandle,int parentObjectHandle, bool keepInPlace=true)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>parentObjectHandle</strong>: the desired parent object, set -1 for no parent.</div>
<div><strong>keepInPlace</strong>: if true, the object will stay in place, otherwise, it will keep its local transformation.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setObjectParent(int environmentHandle,int objectHandle,int parentObjectHandle, bool keepInPlace=True)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectParent">simIK.getObjectParent</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setObjectPose" id="simIK.setObjectPose"></a>simIK.setObjectPose</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the pose (position and quaternion) of an object. If the object is a joint object, the pose does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setObjectPose(int environmentHandle,int objectHandle,float[7] pose,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>pose</strong>: the position and quaternion (x,y,z,qx,qy,qz,qw).</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which the pose is expressed. Otherwise, specify simIK.handle_world if you specify the absolute pose, or simIK.handle_parent if you specify the pose relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setObjectPose(int environmentHandle,int objectHandle,list pose,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectPose">simIK.getObjectPose</a>, <a href="#simIK.setObjectTransformation">simIK.setObjectTransformation</a>, <a href="#simIK.setObjectMatrix">simIK.setObjectMatrix</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.setObjectTransformation" id="simIK.setObjectTransformation"></a>simIK.setObjectTransformation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the transformation (position and quaternion/Euler angles) of an object. If the object is a joint object, the transformation does not include the joint's intrinsic transformation.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setObjectTransformation(int environmentHandle,int objectHandle,float[3] position,float[] eulerOrQuaternion,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>objectHandle</strong>: the handle of the object.</div>
<div><strong>position</strong>: the position component of the transformation.</div>
<div><strong>eulerOrQuaternion</strong>: the orientation component of the transformation. If 3 values are specified, then they will be interpreted as Euler angles (alpha,beta,gamma). If 4 values are specified, they will be interpreted as quaternion values (x,y,z,w).</div>
<div><strong>relativeToObjectHandle</strong>: the handle of an object relative to which the transformation is expressed. Otherwise, specify simIK.handle_world if you specify the absolute transformation, or simIK.handle_parent if you specify the transformation relative to the parent object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setObjectTransformation(int environmentHandle,int objectHandle,list position,list eulerOrQuaternion,int relativeToObjectHandle=simIK.handle_world)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getObjectTransformation">simIK.getObjectTransformation</a>, <a href="#simIK.setObjectPose">simIK.setObjectPose</a>, <a href="#simIK.setObjectMatrix">simIK.setObjectMatrix</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.setSphericalJointMatrix" id="simIK.setSphericalJointMatrix"></a>simIK.setSphericalJointMatrix</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the rotation transformation matrix of a spherical joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setSphericalJointMatrix(int environmentHandle,int jointHandle,float[12] matrix)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>matrix</strong>: a table of 12 values representing the transformation matrix (the last row of the 4x4 matrix (0,0,0,1) is omitted). The translation part in the matrix will be ignored.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setSphericalJointMatrix(int environmentHandle,int jointHandle,list matrix)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointMatrix">simIK.getJointMatrix</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.setSphericalJointRotation">simIK.setSphericalJointRotation</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simIK.setSphericalJointRotation" id="simIK.setSphericalJointRotation"></a>simIK.setSphericalJointRotation</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Sets the rotation transformation of a spherical joint.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setSphericalJointRotation(int environmentHandle,int jointHandle,float[] eulerOrQuaternion)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment.</div>
<div><strong>jointHandle</strong>: the handle of the joint.</div>
<div><strong>eulerOrQuaternion</strong>: the rotation transformation to apply. If 3 values are specified, they will be interpreted as Euler angles (alpha,beta,gamma). If 4 values are specified, they will be interpreted as quaternion values (x,y,z,w).</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setSphericalJointRotation(int environmentHandle,int jointHandle,list eulerOrQuaternion)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getJointTransformation">simIK.getJointTransformation</a>, <a href="#simIK.setSphericalJointMatrix">simIK.setSphericalJointMatrix</a>, <a href="#simIK.setJointPosition">simIK.setJointPosition</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.setTargetDummy" id="simIK.setTargetDummy"></a>simIK.setTargetDummy</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Associates a tip dummy with a target dummy, or removes that association. If the tip dummy is already associated with another target dummy, then first remove that association before setting another one</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.setTargetDummy(int environmentHandle,int tipDummyHandle,int targetDummyHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the environment</div>
<div><strong>tipDummyHandle</strong>: the handle of the tip dummy</div>
<div><strong>targetdDummyHandle</strong>: the handle of the new target dummy, or -1 to remove a previous target dummy association from the tip dummy</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.setTargetDummy(int environmentHandle,int tipDummyHandle,int targetDummyHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.createEnvironment">simIK.createEnvironment</a>, <a href="#simIK.getTargetDummy">simIK.getTargetDummy</a>, <a href="#simIK.getObjectHandle">simIK.getObjectHandle</a></td>
</tr>
</table>
<br>



<p class="subsectionBar">
<a name="simIK.syncToSim" id="simIK.syncToSim"></a>simIK.syncToSim</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Convenience function to apply inverse kinematic values computed in the IK world, to the scene. Use together with <a href="#simIK.addElementFromScene">simIK.addElementFromScene</a>.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.syncToSim(int environmentHandle,int[] ikGroups)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the IK environment</div>
<div><strong>ikGroups</strong>: the handles of one or several IK groups</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.syncToSim(int environmentHandle,int[] ikGroups)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.addElementFromScene">simIK.addElementFromScene</a>,<a href="#simIK.syncFromSim">simIK.syncFromSim</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simIK.syncFromSim" id="simIK.syncFromSim"></a>simIK.syncFromSim</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Convenience function to apply the scene state to its ik environment counterpart. Use together with <a href="#simIK.addElementFromScene">simIK.addElementFromScene</a>.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simIK.syncFromSim(int environmentHandle,int[] ikGroups)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>environmentHandle</strong>: the handle of the IK environment</div>
<div><strong>ikGroups</strong>: the handle of one or several IK groups</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return values</td>
<td class="apiTableRightLRet">
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simIK.syncFromSim(int environmentHandle,int[] ikGroups)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simIK.addElementFromScene">simIK.addElementFromScene</a>,<a href="#simIK.syncToSim">simIK.syncToSim</a></td>
</tr>
</table>
<br>






</td></tr>
</table></div>
<script type="text/javascript">
//
view = getParameterByName('view')
document.getElementById('alphabetical').style.display = view == 'alphabetical' ? 'table-cell' : 'none'
document.getElementById('category').style.display = view == 'category' ? 'table-cell' : 'none'
document.getElementById('commands').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('enums').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('structs').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('scriptFunctions').style.display = view == null ? 'table-cell' : 'none'
//
                </script>
</body>
</html>
