
from typing import Optional, Protocol

class Sim(Protocol):

    def setJointMaxForce(self,objectHandle:int, forceOrTorque:float)->None:
        ...
    
    def getJointMaxForce(self,jointHandle:int)->float:
        ...
    
    def createPureShape(self,primitiveType:int, options:int, sizes:list[float], mass:float, precision:Optional[list[int]] = None)->int:
        ...
    
    def removeObject(self,objectHandle:int)->None:
        ...
    
    def getVisionSensorDepthBuffer(self,sensorHandle:int, pos:Optional[list[int]] = None, size:Optional[list[int]] = None)->tuple[list[int], list[int]]:
        ...
    
    def getVisionSensorCharImage(self,sensorHandle:int, pos:Optional[list[int]] = None, size:Optional[list[int]] = None)->tuple[list[int], list[int]]:
        ...
    
    def setVisionSensorCharImage(self,sensorHandle:int, image:list[int])->None:
        ...
    
    def getObjectSelection(self)->list[int]:
        ...
    
    def setObjectSelection(self,objectHandles:list[float])->None:
        ...
    
    def getStringSignal(self,signalName:str)->str:
        ...
    
    def getInt32Signal(self,signalName:str)->Optional[int]:
        ...
    
    def getFloatSignal(self,signalName:str)->Optional[float]:
        ...
    
    def acquireLock(self)->None:
        ...
    
    def addDrawingObject(self,objectType:int, size:float, duplicateTolerance:float, parentObjectHandle:int, maxItemCount:int, color:Optional[list[float]] = None)->int:
        ...
    
    def addDrawingObjectItem(self,drawingObjectHandle:int, itemData:list[float])->int:
        ...
    
    def addForce(self,shapeHandle:int, position:list[float], force:list[float])->None:
        ...
    
    def addForceAndTorque(self,shapeHandle:int, force:Optional[list[float]] = None, torque:Optional[list[float]] = None)->None:
        ...
    
    def addGraphCurve(self,graphHandle:int, curveName:str, dim:int, streamIds:list[int], defaultValues:list[float], unitStr:str, options:Optional[int] = None, color:Optional[list[float]] = None, curveWidth:Optional[int] = None)->int:
        ...
    
    def addGraphStream(self,graphHandle:int, streamName:str, unit:str, options:Optional[int] = None, color:Optional[list[float]] = None, cyclicRange:Optional[float] = None)->int:
        ...
    
    def addItemToCollection(self,collectionHandle:int, what:int, objectHandle:int, options:int)->None:
        ...
    
    def addLog(self,verbosityLevel:int, logMessage:str)->None:
        ...
    
    def addParticleObject(self,objectType:int, size:float, density:float, params:list[float], lifeTime:float, maxItemCount:int, color:Optional[list[float]] = None)->int:
        ...
    
    def addParticleObjectItem(self,objectHandle:int, itemData:list[float])->None:
        ...
    
    def addReferencedHandle(self,objectHandle:int, referencedHandle:int)->None:
        ...
    
    def addScript(self,scriptType:int)->int:
        ...
    
    def adjustView(self,viewHandleOrIndex:int, associatedViewableObjectHandle:int, options:int, viewLabel:Optional[str] = None)->int:
        ...
    
    def alignShapeBB(self,shapeHandle:int, pose:list[float])->int:
        ...
    
    def alphaBetaGammaToYawPitchRoll(self,alphaAngle:float, betaAngle:float, gammaAngle:float)->tuple[float, float, float]:
        ...
    
    def announceSceneContentChange(self)->int:
        ...
    
    def associateScriptWithObject(self,scriptHandle:int, objectHandle:int)->None:
        ...
    
    def auxiliaryConsoleClose(self,consoleHandle:int)->int:
        ...
    
    def auxiliaryConsoleOpen(self,title:str, maxLines:int, mode:int, position:Optional[list[int]] = None, size:Optional[list[int]] = None, textColor:Optional[list[float]] = None, backgroundColor:Optional[list[float]] = None)->int:
        ...
    
    def auxiliaryConsolePrint(self,consoleHandle:int, text:str)->int:
        ...
    
    def auxiliaryConsoleShow(self,consoleHandle:int, showState:bool)->int:
        ...
    
    def broadcastMsg(self,message:dict, options:Optional[int] = None)->None:
        ...
    
    def buildIdentityMatrix(self)->list[float]:
        ...
    
    def buildMatrix(self,position:list[float], eulerAngles:list[float])->list[float]:
        ...
    
    def buildMatrixQ(self,position:list[float], quaternion:list[float])->list[float]:
        ...
    
    def buildPose(self,position:list[float], eulerAnglesOrAxis:list[float], mode:Optional[int] = None, axis2:Optional[list[float]] = None)->list[float]:
        ...
    
    def callScriptFunction(self,functionName:str, scriptHandle:int, inArg:Optional[dict] = None)->dict:
        ...
    
    def cameraFitToView(self,viewHandleOrIndex:int, objectHandles:Optional[list[int]] = None, options:Optional[int] = None, scaling:Optional[float] = None)->int:
        ...
    
    def changeEntityColor(self,entityHandle:int, newColor:list[float], colorComponent:Optional[int] = None)->list[dict]:
        ...
    
    def checkCollision(self,entity1Handle:int, entity2Handle:int)->tuple[int, list[int]]:
        ...
    
    def checkCollisionEx(self,entity1Handle:int, entity2Handle:int)->tuple[int, list[float]]:
        ...
    
    def checkDistance(self,entity1Handle:int, entity2Handle:int, threshold:Optional[float] = None)->tuple[int, list[float], list[int]]:
        ...
    
    def checkOctreePointOccupancy(self,octreeHandle:int, options:int, points:list[float])->tuple[int, int, int, int]:
        ...
    
    def checkProximitySensor(self,sensorHandle:int, entityHandle:int)->tuple[int, float, list[float], int, list[float]]:
        ...
    
    def checkProximitySensorEx(self,sensorHandle:int, entityHandle:int, mode:int, threshold:float, maxAngle:float)->tuple[int, float, list[float], int, list[float]]:
        ...
    
    def checkProximitySensorEx2(self,sensorHandle:int, vertices:list[float], itemType:int, itemCount:int, mode:int, threshold:float, maxAngle:float)->tuple[int, float, list[float], list[float]]:
        ...
    
    def checkVisionSensor(self,sensorHandle:int, entityHandle:int)->tuple[int, list[float], list[float]]:
        ...
    
    def checkVisionSensorEx(self,sensorHandle:int, entityHandle:int, returnImage:bool)->list[float]:
        ...
    
    def clearFloatSignal(self,signalName:str)->None:
        ...
    
    def clearInt32Signal(self,signalName:str)->None:
        ...
    
    def clearStringSignal(self,signalName:str)->None:
        ...
    
    def closeScene(self)->int:
        ...
    
    def combineRgbImages(self,img1:list[int], img1Res:list[int], img2:list[int], img2Res:list[int], operation:int)->list[int]:
        ...
    
    def computeMassAndInertia(self,shapeHandle:int, density:float)->int:
        ...
    
    def convexDecompose(self,shapeHandle:int, options:int, intParams:list[int], floatParams:list[float])->int:
        ...
    
    def copyPasteObjects(self,objectHandles:list[int], options:Optional[int] = None)->list[int]:
        ...
    
    def copyTable(self,original:list[dict])->list[dict]:
        ...
    
    def createCollection(self,options:Optional[int] = None)->int:
        ...
    
    def createDummy(self,size:float)->int:
        ...
    
    def createForceSensor(self,options:int, intParams:list[int], floatParams:list[float])->int:
        ...
    
    def createHeightfieldShape(self,options:int, shadingAngle:float, xPointCount:int, yPointCount:int, xSize:float, heights:list[float])->int:
        ...
    
    def createJoint(self,jointType:int, jointMode:int, options:int, sizes:Optional[list[float]] = None)->int:
        ...
    
    def createOctree(self,voxelSize:float, options:int, pointSize:float)->int:
        ...
    
    def createPath(self,ctrlPts:list[float], options:Optional[int] = None, subdiv:Optional[int] = None, smoothness:Optional[float] = None, orientationMode:Optional[int] = None, upVector:Optional[list[float]] = None)->int:
        ...
    
    def createPointCloud(self,maxVoxelSize:float, maxPtCntPerVoxel:int, options:int, pointSize:float)->int:
        ...
    
    def createPrimitiveShape(self,primitiveType:int, sizes:list[float], options:Optional[int] = None)->int:
        ...
    
    def createProximitySensor(self,sensorType:int, subType:int, options:int, intParams:list[int], floatParams:list[float])->int:
        ...
    
    def createShape(self,options:int, shadingAngle:float, vertices:list[float], indices:list[int], normals:list[float], textureCoordinates:list[float], texture:list[int], textureResolution:list[int])->int:
        ...
    
    def createTexture(self,fileName:str, options:int, planeSizes:Optional[list[float]] = None, scalingUV:Optional[list[float]] = None, xy_g:Optional[list[float]] = None, fixedResolution:Optional[int] = None, resolution:Optional[list[int]] = None)->tuple[int, int, list[int]]:
        ...
    
    def createVisionSensor(self,options:int, intParams:list[int], floatParams:list[float])->int:
        ...
    
    def destroyCollection(self,collectionHandle:int)->None:
        ...
    
    def destroyGraphCurve(self,graphHandle:int, curveId:int)->None:
        ...
    
    def duplicateGraphCurveToStatic(self,graphHandle:int, curveId:int, curveName:Optional[str] = None)->int:
        ...
    
    def executeScriptString(self,stringToExecute:str, scriptHandle:int)->tuple[int, dict]:
        ...
    
    def exportMesh(self,fileformat:int, pathAndFilename:str, options:int, scalingFactor:float, vertices:list[float], indices:list[int])->None:
        ...
    
    def floatingViewAdd(self,posX:float, posY:float, sizeX:float, sizeY:float, options:int)->int:
        ...
    
    def floatingViewRemove(self,floatingViewHandle:int)->int:
        ...
    
    def generateShapeFromPath(self,path:list[float], section:list[float], options:Optional[int] = None, upVector:Optional[list[float]] = None)->int:
        ...
    
    def generateTextShape(self,txt:str, color:Optional[list[float]] = None, height:Optional[float] = None, centered:Optional[bool] = None, alphabetLocation:Optional[str] = None)->int:
        ...
    
    def generateTimeOptimalTrajectory(self,path:list[float], pathLengths:list[float], minMaxVel:list[float], minMaxAccel:list[float], trajPtSamples:Optional[int] = None, boundaryCondition:Optional[str] = None, timeout:Optional[float] = None)->tuple[list[float], list[float]]:
        ...
    
    def getAlternateConfigs(self,jointHandles:list[int], inputConfig:list[float], tipHandle:Optional[int] = None, lowLimits:Optional[list[float]] = None, ranges:Optional[list[float]] = None)->list[float]:
        ...
    
    def getApiFunc(self,scriptHandle:int, apiWord:str)->list[str]:
        ...
    
    def getApiInfo(self,scriptHandle:int, apiWord:str)->str:
        ...
    
    def getArrayParam(self,parameter:int)->list[float]:
        ...
    
    def getAutoYieldDelay(self)->float:
        ...
    
    def getBoolParam(self,parameter:int)->bool:
        ...
    
    def getClosestPosOnPath(self,path:list[float], pathLengths:list[float], absPt:list[float])->float:
        ...
    
    def getCollectionObjects(self,collectionHandle:int)->list[int]:
        ...
    
    def getConfigDistance(self,configA:list[float], configB:list[float], metric:Optional[list[float]] = None, types:Optional[list[int]] = None)->float:
        ...
    
    def getContactInfo(self,dynamicPass:int, objectHandle:int, index:int)->tuple[list[int], list[float], list[float], list[float]]:
        ...
    
    def getDecimatedMesh(self,verticesIn:list[float], indicesIn:list[int], decimationPercentage:float)->tuple[list[float], list[int]]:
        ...
    
    def getEngineBoolParam(self,paramId:int, objectHandle:int)->bool:
        ...
    
    def getEngineFloatParam(self,paramId:int, objectHandle:int)->float:
        ...
    
    def getEngineInt32Param(self,paramId:int, objectHandle:int)->int:
        ...
    
    def getEulerAnglesFromMatrix(self,matrix:list[float])->list[float]:
        ...
    
    def getExplicitHandling(self,objectHandle:int)->int:
        ...
    
    def getExtensionString(self,objectHandle:int, index:int, key:Optional[str] = None)->str:
        ...
    
    def getFloatParam(self,parameter:int)->float:
        ...
    
    def getGenesisEvents(self)->list[dict]:
        ...
    
    def getGraphCurve(self,graphHandle:int, graphType:int, curveIndex:int)->tuple[str, int, list[float], list[float], list[float], list[float], int, int]:
        ...
    
    def getGraphInfo(self,graphHandle:int)->tuple[int, list[float], list[float], int]:
        ...
    
    def getInt32Param(self,parameter:int)->int:
        ...
    
    def getIsRealTimeSimulation(self)->int:
        ...
    
    def getJointDependency(self,jointHandle:int)->tuple[int, float, float]:
        ...
    
    def getJointForce(self,jointHandle:int)->float:
        ...
    
    def getJointInterval(self,objectHandle:int)->tuple[bool, list[float]]:
        ...
    
    def getJointMode(self,jointHandle:int)->tuple[int, int]:
        ...
    
    def getJointPosition(self,objectHandle:int)->float:
        ...
    
    def getJointTargetForce(self,jointHandle:int)->float:
        ...
    
    def getJointTargetPosition(self,objectHandle:int)->float:
        ...
    
    def getJointTargetVelocity(self,objectHandle:int)->float:
        ...
    
    def getJointType(self,objectHandle:int)->int:
        ...
    
    def getJointVelocity(self,jointHandle:int)->float:
        ...
    
    def getLastInfo(self)->str:
        ...
    
    def getLightParameters(self,lightHandle:int)->tuple[int, list[float], list[float], list[float]]:
        ...
    
    def getLinkDummy(self,dummyHandle:int)->int:
        ...
    
    def getMatchingPersistentDataTags(self,pattern:str)->list[str]:
        ...
    
    def getMatrixInverse(self,matrix:list[float])->list[float]:
        ...
    
    def getModelProperty(self,objectHandle:int)->int:
        ...
    
    def getNamedBoolParam(self,name:str)->bool:
        ...
    
    def getNamedFloatParam(self,name:str)->float:
        ...
    
    def getNamedInt32Param(self,name:str)->int:
        ...
    
    def getNamedStringParam(self,paramName:str)->list[int]:
        ...
    
    def getNavigationMode(self)->int:
        ...
    
    def getObject(self,path:str, options:Optional[dict] = None)->int:
        ...
    
    def getObjectAlias(self,objectHandle:int, options:Optional[int] = None)->str:
        ...
    
    def getObjectAliasRelative(self,handle:int, baseHandle:int, options:Optional[int] = None)->str:
        ...
    
    def getObjectChild(self,objectHandle:int, index:int)->int:
        ...
    
    def getObjectChildPose(self,objectHandle:int)->list[float]:
        ...
    
    def getObjectColor(self,objectHandle:int, index:int, colorComponent:int)->list[float]:
        ...
    
    def getObjectFloatArrayParam(self,objectHandle:int, parameterID:int)->list[float]:
        ...
    
    def getObjectFloatParam(self,objectHandle:int, parameterID:int)->float:
        ...
    
    def getObjectFromUid(self,uid:int, options:Optional[dict] = None)->None:
        ...
    
    def getObjectInt32Param(self,objectHandle:int, parameterID:int)->int:
        ...
    
    def getObjectMatrix(self,objectHandle:int, relativeToObjectHandle:Optional[int] = None)->list[float]:
        ...
    
    def getObjectOrientation(self,objectHandle:int, relativeToObjectHandle:Optional[int] = None)->list[float]:
        ...
    
    def getObjectParent(self,objectHandle:int)->int:
        ...
    
    def getObjectPose(self,objectHandle:int, relativeToObjectHandle:Optional[int] = None)->list[float]:
        ...
    
    def getObjectPosition(self,objectHandle:int, relativeToObjectHandle:Optional[int] = None)->list[float]:
        ...
    
    def getObjectProperty(self,objectHandle:int)->int:
        ...
    
    def getObjectQuaternion(self,objectHandle:int, relativeToObjectHandle:Optional[int] = None)->list[float]:
        ...
    
    def getObjectSel(self)->list[int]:
        ...
    
    def getObjectSizeFactor(self,ObjectHandle:int)->float:
        ...
    
    def getObjectSpecialProperty(self,objectHandle:int)->int:
        ...
    
    def getObjectStringParam(self,objectHandle:int, parameterID:int)->list[int]:
        ...
    
    def getObjectType(self,objectHandle:int)->int:
        ...
    
    def getObjectUid(self,objectHandle:int)->int:
        ...
    
    def getObjectVelocity(self,objectHandle:int)->tuple[list[float], list[float]]:
        ...
    
    def getObjects(self,index:int, objectType:int)->int:
        ...
    
    def getObjectsInTree(self,treeBaseHandle:int, objectType:Optional[int] = None, options:Optional[int] = None)->list[int]:
        ...
    
    def getOctreeVoxels(self,octreeHandle:int)->list[float]:
        ...
    
    def getPage(self)->int:
        ...
    
    def getPathInterpolatedConfig(self,path:list[float], pathLengths:list[float], t:float, method:Optional[dict] = None, types:Optional[list[int]] = None)->list[float]:
        ...
    
    def getPathLengths(self,path:list[float], dof:int, distCallback:Optional[str] = None)->tuple[list[float], float]:
        ...
    
    def getPersistentDataTags(self)->list[str]:
        ...
    
    def getPluginInfo(self,pluginName:str, infoType:int)->str:
        ...
    
    def getPluginName(self,index:int)->str:
        ...
    
    def getPointCloudOptions(self,pointCloudHandle:int)->tuple[float, int, int, float]:
        ...
    
    def getPointCloudPoints(self,pointCloudHandle:int)->list[float]:
        ...
    
    def getPoseInverse(self,pose:list[float])->list[float]:
        ...
    
    def getQHull(self,verticesIn:list[float])->tuple[list[float], list[int]]:
        ...
    
    def getQuaternionFromMatrix(self,matrix:list[float])->list[float]:
        ...
    
    def getRandom(self,seed:Optional[int] = None)->float:
        ...
    
    def getReferencedHandles(self,objectHandle:int)->list[int]:
        ...
    
    def getRotationAxis(self,matrixStart:list[float], matrixGoal:list[float])->tuple[list[float], float]:
        ...
    
    def getScaledImage(self,imageIn:list[int], resolutionIn:list[int], desiredResolutionOut:list[int], options:int)->tuple[list[int], list[int]]:
        ...
    
    def getScript(self,scriptType:int, objectHandle:Optional[int] = None, scriptName:Optional[str] = None)->int:
        ...
    
    def getScriptFunctions(self,scriptHandle:int)->dict:
        ...
    
    def getScriptInt32Param(self,scriptHandle:int, parameterID:int)->int:
        ...
    
    def getScriptStringParam(self,scriptHandle:int, parameterID:int)->list[int]:
        ...
    
    def getSettingBool(self,key:str)->bool:
        ...
    
    def getSettingFloat(self,key:str)->float:
        ...
    
    def getSettingInt32(self,key:str)->int:
        ...
    
    def getSettingString(self,key:str)->str:
        ...
    
    def getShapeBB(self,shapeHandle:int)->list[float]:
        ...
    
    def getShapeColor(self,shapeHandle:int, colorName:str, colorComponent:int)->tuple[int, list[float]]:
        ...
    
    def getShapeGeomInfo(self,shapeHandle:int)->tuple[int, int, list[float]]:
        ...
    
    def getShapeInertia(self,shapeHandle:int)->tuple[list[float], list[float]]:
        ...
    
    def getShapeMassAndInertia(self,shapeHandle:int)->float:
        ...
    
    def getShapeMesh(self,shapeHandle:int)->tuple[list[float], list[int], list[float]]:
        ...
    
    def getShapeTextureId(self,shapeHandle:int)->int:
        ...
    
    def getShapeViz(self,shapeHandle:int, itemIndex:int)->dict:
        ...
    
    def getSignalName(self,signalIndex:int, signalType:int)->str:
        ...
    
    def getSimulationState(self)->int:
        ...
    
    def getSimulationStopping(self)->bool:
        ...
    
    def getSimulationTime(self)->float:
        ...
    
    def getSimulationTimeStep(self)->float:
        ...
    
    def getSimulatorMessage(self)->tuple[int, list[int], list[int]]:
        ...
    
    def getStackTraceback(self,scriptHandle:Optional[int] = None)->str:
        ...
    
    def getStringParam(self,parameter:int)->str:
        ...
    
    def getSystemTime(self)->float:
        ...
    
    def getTextureId(self,textureName:str)->tuple[int, list[int]]:
        ...
    
    def getThreadId(self)->int:
        ...
    
    def getUserVariables(self)->list[str]:
        ...
    
    def getVelocity(self,shapeHandle:int)->tuple[list[float], list[float]]:
        ...
    
    def getVisionSensorDepth(self,sensorHandle:int, options:Optional[int] = None, pos:Optional[list[int]] = None, size:Optional[list[int]] = None)->tuple[list[int], list[int]]:
        ...
    
    def getVisionSensorImg(self,sensorHandle:int, options:Optional[int] = None, rgbaCutOff:Optional[float] = None, pos:Optional[list[int]] = None, size:Optional[list[int]] = None)->tuple[list[int], list[int]]:
        ...
    
    def getVisionSensorRes(self,sensorHandle:int)->None:
        ...
    
    def groupShapes(self,shapeHandles:list[int], merge:Optional[bool] = None)->int:
        ...
    
    def handleAddOnScripts(self,callType:int)->int:
        ...
    
    def handleChildScripts(self,callType:int)->int:
        ...
    
    def handleDynamics(self,deltaTime:float)->int:
        ...
    
    def handleEmbeddedScripts(self,callType:int)->int:
        ...
    
    def handleGraph(self,objectHandle:int, simulationTime:float)->None:
        ...
    
    def handleJointMotion(self)->None:
        ...
    
    def handleProximitySensor(self,sensorHandle:int)->tuple[int, float, list[float], int, list[float]]:
        ...
    
    def handleSandboxScript(self,callType:int)->None:
        ...
    
    def handleSensingStart(self)->None:
        ...
    
    def handleSimulationStart(self)->None:
        ...
    
    def handleVisionSensor(self,sensorHandle:int)->tuple[int, list[float], list[float]]:
        ...
    
    def importMesh(self,fileformat:int, pathAndFilename:str, options:int, identicalVerticeTolerance:float, scalingFactor:float)->tuple[list[float], list[int]]:
        ...
    
    def importShape(self,fileformat:int, pathAndFilename:str, options:int, identicalVerticeTolerance:float, scalingFactor:float)->int:
        ...
    
    def initScript(self,scriptHandle:int)->bool:
        ...
    
    def insertObjectIntoOctree(self,octreeHandle:int, objectHandle:int, options:int, color:Optional[list[float]] = None, tag:Optional[int] = None)->int:
        ...
    
    def insertObjectIntoPointCloud(self,pointCloudHandle:int, objectHandle:int, options:int, gridSize:float, color:Optional[list[float]] = None, duplicateTolerance:Optional[float] = None)->int:
        ...
    
    def insertPointsIntoPointCloud(self,pointCloudHandle:int, options:int, points:list[float], color:Optional[list[float]] = None, duplicateTolerance:Optional[float] = None)->int:
        ...
    
    def insertVoxelsIntoOctree(self,octreeHandle:int, options:int, points:list[float], color:Optional[list[float]] = None, tag:Optional[list[int]] = None)->int:
        ...
    
    def interpolateMatrices(self,matrixIn1:list[float], matrixIn2:list[float], interpolFactor:float)->list[float]:
        ...
    
    def interpolatePoses(self,poseIn1:list[float], poseIn2:list[float], interpolFactor:float)->list[float]:
        ...
    
    def intersectPointsWithPointCloud(self,pointCloudHandle:int, options:int, points:list[float], tolerance:float)->int:
        ...
    
    def isDeprecated(self,funcOrConst:str)->int:
        ...
    
    def isDynamicallyEnabled(self,objectHandle:int)->bool:
        ...
    
    def isHandle(self,objectHandle:int)->bool:
        ...
    
    def launchExecutable(self,filename:str, parameters:Optional[str] = None, showStatus:Optional[int] = None)->None:
        ...
    
    def loadImage(self,options:int, filename:str)->tuple[list[int], list[int]]:
        ...
    
    def loadModel(self,filename:str)->int:
        ...
    
    def loadScene(self,filename:str)->None:
        ...
    
    def matrixToPose(self,matrix:list[float])->list[float]:
        ...
    
    def moduleEntry(self,handle:int, label:Optional[str] = None, state:Optional[int] = None)->int:
        ...
    
    def moveToConfig(self,flags:int, currentPos:list[float], currentVel:list[float], currentAccel:list[float], maxVel:list[float], maxAccel:list[float], maxJerk:list[float], targetPos:list[float], targetVel:list[float], callback:str, auxData:Optional[dict] = None, cyclicJoints:Optional[list[bool]] = None, timeStep:Optional[float] = None)->tuple[list[float], list[float], list[float], float]:
        ...
    
    def moveToPose(self,flags:int, currentPose:list[float], maxVel:list[float], maxAccel:list[float], maxJerk:list[float], targetPose:list[float], callback:str, auxData:Optional[dict] = None, metric:Optional[list[float]] = None, timeStep:Optional[float] = None)->tuple[list[float], float]:
        ...
    
    def multiplyMatrices(self,matrixIn1:list[float], matrixIn2:list[float])->list[float]:
        ...
    
    def multiplyPoses(self,poseIn1:list[float], poseIn2:list[float])->list[float]:
        ...
    
    def multiplyVector(self,matrix:list[float], inVectors:list[float])->list[float]:
        ...
    
    def packDoubleTable(self,doubleNumbers:list[float], startDoubleIndex:Optional[int] = None, doubleCount:Optional[int] = None)->list[int]:
        ...
    
    def packFloatTable(self,floatNumbers:list[float], startFloatIndex:Optional[int] = None, floatCount:Optional[int] = None)->list[int]:
        ...
    
    def packInt32Table(self,int32Numbers:list[int], startInt32Index:Optional[int] = None, int32Count:Optional[int] = None)->list[int]:
        ...
    
    def packTable(self,aTable:list[dict], scheme:Optional[int] = None)->list[int]:
        ...
    
    def packUInt16Table(self,uint16Numbers:list[int], startUint16Index:Optional[int] = None, uint16Count:Optional[int] = None)->list[int]:
        ...
    
    def packUInt32Table(self,uint32Numbers:list[int], startUInt32Index:Optional[int] = None, uint32Count:Optional[int] = None)->list[int]:
        ...
    
    def packUInt8Table(self,uint8Numbers:list[int], startUint8Index:Optional[int] = None, uint8count:Optional[int] = None)->list[int]:
        ...
    
    def pauseSimulation(self)->int:
        ...
    
    def persistentDataRead(self,dataTag:str)->list[int]:
        ...
    
    def persistentDataWrite(self,dataTag:str, dataValue:list[int], options:Optional[int] = None)->None:
        ...
    
    def poseToMatrix(self,pose:list[float])->list[float]:
        ...
    
    def pushUserEvent(self,event:str, handle:int, uid:int, eventData:dict, options:Optional[int] = None)->None:
        ...
    
    def quitSimulator(self)->None:
        ...
    
    def readCustomDataBlock(self,objectHandle:int, tagName:str)->list[int]:
        ...
    
    def readCustomDataBlockEx(self,handle:int, tagName:str, options:Optional[dict] = None)->None:
        ...
    
    def readCustomDataBlockTags(self,objectHandle:int)->list[str]:
        ...
    
    def readCustomTableData(self,handle:int, tagName:str, options:Optional[dict] = None)->None:
        ...
    
    def readForceSensor(self,objectHandle:int)->tuple[int, list[float], list[float]]:
        ...
    
    def readProximitySensor(self,sensorHandle:int)->tuple[int, float, list[float], int, list[float]]:
        ...
    
    def readTexture(self,textureId:int, options:int, posX:Optional[int] = None, posY:Optional[int] = None, sizeX:Optional[int] = None, sizeY:Optional[int] = None)->list[int]:
        ...
    
    def readVisionSensor(self,sensorHandle:int)->tuple[int, list[float], list[float]]:
        ...
    
    def refreshDialogs(self,refreshDegree:int)->int:
        ...
    
    def releaseLock(self)->None:
        ...
    
    def relocateShapeFrame(self,shapeHandle:int, pose:list[float])->int:
        ...
    
    def removeDrawingObject(self,drawingObjectHandle:int)->None:
        ...
    
    def removeModel(self,objectHandle:int)->int:
        ...
    
    def removeObjects(self,objectHandles:list[int])->None:
        ...
    
    def removeParticleObject(self,particleObjectHandle:int)->None:
        ...
    
    def removePointsFromPointCloud(self,pointCloudHandle:int, options:int, points:list[float], tolerance:float)->int:
        ...
    
    def removeReferencedObjects(self,objectHandle:int)->None:
        ...
    
    def removeScript(self,scriptHandle:int)->None:
        ...
    
    def removeVoxelsFromOctree(self,octreeHandle:int, options:int, points:list[float])->int:
        ...
    
    def resamplePath(self,path:list[float], pathLengths:list[float], finalConfigCnt:int, method:Optional[dict] = None, types:Optional[list[int]] = None)->list[float]:
        ...
    
    def resetDynamicObject(self,objectHandle:int)->None:
        ...
    
    def resetGraph(self,objectHandle:int)->None:
        ...
    
    def resetProximitySensor(self,objectHandle:int)->None:
        ...
    
    def resetVisionSensor(self,sensorHandle:int)->None:
        ...
    
    def restoreEntityColor(self,originalColorData:list[dict])->None:
        ...
    
    def rotateAroundAxis(self,matrixIn:list[float], axis:list[float], axisPos:list[float], angle:float)->list[float]:
        ...
    
    def ruckigPos(self,dofs:int, baseCycleTime:float, flags:int, currentPosVelAccel:list[float], maxVelAccelJerk:list[float], selection:list[int], targetPosVel:list[float])->int:
        ...
    
    def ruckigRemove(self,handle:int)->None:
        ...
    
    def ruckigStep(self,handle:int, cycleTime:float)->tuple[int, list[float], float]:
        ...
    
    def ruckigVel(self,dofs:int, baseCycleTime:float, flags:int, currentPosVelAccel:list[float], maxAccelJerk:list[float], selection:list[int], targetVel:list[float])->int:
        ...
    
    def saveImage(self,image:list[int], resolution:list[int], options:int, filename:str, quality:int)->list[int]:
        ...
    
    def saveModel(self,modelBaseHandle:int, filename:str)->None:
        ...
    
    def saveScene(self,filename:str)->None:
        ...
    
    def scaleObject(self,objectHandle:int, xScale:float, yScale:float, zScale:float, options:Optional[int] = None)->None:
        ...
    
    def scaleObjects(self,objectHandles:list[int], scalingFactor:float, scalePositionsToo:bool)->None:
        ...
    
    def serialCheck(self,portHandle:int)->int:
        ...
    
    def serialClose(self,portHandle:int)->None:
        ...
    
    def serialOpen(self,portString:str, baudrate:int)->int:
        ...
    
    def serialRead(self,portHandle:int, dataLengthToRead:int, blockingOperation:bool, closingString:Optional[list[int]] = None, timeout:Optional[float] = None)->list[int]:
        ...
    
    def serialSend(self,portHandle:int, data:list[int])->int:
        ...
    
    def setArrayParam(self,parameter:int, arrayOfValues:list[float])->None:
        ...
    
    def setAutoYieldDelay(self,dt:float)->None:
        ...
    
    def setBoolParam(self,parameter:int, boolState:bool)->None:
        ...
    
    def setEngineBoolParam(self,paramId:int, objectHandle:int, boolParam:bool)->None:
        ...
    
    def setEngineFloatParam(self,paramId:int, objectHandle:int, floatParam:float)->None:
        ...
    
    def setEngineInt32Param(self,paramId:int, objectHandle:int, int32Param:int)->None:
        ...
    
    def setExplicitHandling(self,objectHandle:int, explicitHandlingFlags:int)->None:
        ...
    
    def setFloatParam(self,parameter:int, floatState:float)->None:
        ...
    
    def setFloatSignal(self,signalName:str, signalValue:float)->None:
        ...
    
    def setGraphStreamTransformation(self,graphHandle:int, streamId:int, trType:int, mult:Optional[float] = None, off:Optional[float] = None, movAvgPeriod:Optional[int] = None)->None:
        ...
    
    def setGraphStreamValue(self,graphHandle:int, streamId:int, value:float)->None:
        ...
    
    def setInt32Param(self,parameter:int, intState:int)->None:
        ...
    
    def setInt32Signal(self,signalName:str, signalValue:int)->None:
        ...
    
    def setJointDependency(self,jointHandle:int, masterJointHandle:int, offset:float, multCoeff:float)->None:
        ...
    
    def setJointInterval(self,objectHandle:int, cyclic:bool, interval:list[float])->None:
        ...
    
    def setJointMode(self,jointHandle:int, jointMode:int, options:int)->None:
        ...
    
    def setJointPosition(self,objectHandle:int, position:float)->None:
        ...
    
    def setJointTargetForce(self,objectHandle:int, forceOrTorque:float, signedValue:Optional[bool] = None)->None:
        ...
    
    def setJointTargetPosition(self,objectHandle:int, targetPosition:float, motionParams:Optional[list[float]] = None)->None:
        ...
    
    def setJointTargetVelocity(self,objectHandle:int, targetVelocity:float, motionParams:Optional[list[float]] = None)->None:
        ...
    
    def setLightParameters(self,lightHandle:int, state:int, reserved:list[float], diffusePart:list[float], specularPart:list[float])->None:
        ...
    
    def setLinkDummy(self,dummyHandle:int, linkDummyHandle:int)->None:
        ...
    
    def setModelProperty(self,objectHandle:int, property:int)->None:
        ...
    
    def setNamedBoolParam(self,name:str, value:bool)->None:
        ...
    
    def setNamedFloatParam(self,name:str, value:float)->None:
        ...
    
    def setNamedInt32Param(self,name:str, value:int)->None:
        ...
    
    def setNamedStringParam(self,paramName:str, stringParam:list[int])->None:
        ...
    
    def setNavigationMode(self,navigationMode:int)->None:
        ...
    
    def setObjectAlias(self,objectHandle:int, objectAlias:str)->None:
        ...
    
    def setObjectChildPose(self,objectHandle:int, pose:list[float])->None:
        ...
    
    def setObjectColor(self,objectHandle:int, index:int, colorComponent:int, rgbData:list[float])->bool:
        ...
    
    def setObjectFloatArrayParam(self,objectHandle:int, parameterID:int, params:list[float])->None:
        ...
    
    def setObjectFloatParam(self,objectHandle:int, parameterID:int, parameter:float)->None:
        ...
    
    def setObjectInt32Param(self,objectHandle:int, parameterID:int, parameter:int)->None:
        ...
    
    def setObjectMatrix(self,objectHandle:int, matrix:list[float], relativeToObjectHandle:Optional[int] = None)->None:
        ...
    
    def setObjectOrientation(self,objectHandle:int, eulerAngles:list[float], relativeToObjectHandle:Optional[int] = None)->None:
        ...
    
    def setObjectParent(self,objectHandle:int, parentObjectHandle:int, keepInPlace:Optional[bool] = None)->None:
        ...
    
    def setObjectPose(self,objectHandle:int, pose:list[float], relativeToObjectHandle:Optional[int] = None)->None:
        ...
    
    def setObjectPosition(self,objectHandle:int, position:list[float], relativeToObjectHandle:Optional[int] = None)->None:
        ...
    
    def setObjectProperty(self,objectHandle:int, property:int)->None:
        ...
    
    def setObjectQuaternion(self,objectHandle:int, quaternion:list[float], relativeToObjectHandle:Optional[int] = None)->None:
        ...
    
    def setObjectSel(self,objectHandles:list[int])->None:
        ...
    
    def setObjectSpecialProperty(self,objectHandle:int, property:int)->None:
        ...
    
    def setObjectStringParam(self,objectHandle:int, parameterID:int, parameter:list[int])->None:
        ...
    
    def setPage(self,pageIndex:int)->None:
        ...
    
    def setPluginInfo(self,pluginName:str, infoType:int, info:str)->None:
        ...
    
    def setPointCloudOptions(self,pointCloudHandle:int, maxVoxelSize:float, maxPtCntPerVoxel:int, options:int, pointSize:float)->None:
        ...
    
    def setReferencedHandles(self,objectHandle:int, referencedHandles:list[int])->None:
        ...
    
    def setScriptInt32Param(self,scriptHandle:int, parameterID:int, parameter:int)->None:
        ...
    
    def setScriptStringParam(self,scriptHandle:int, parameterID:int, parameter:list[int])->None:
        ...
    
    def setShapeBB(self,shapeHandle:int, size:list[float])->None:
        ...
    
    def setShapeColor(self,shapeHandle:int, colorName:str, colorComponent:int, rgbData:list[float])->None:
        ...
    
    def setShapeInertia(self,shapeHandle:int, inertiaMatrix:list[float], transformationMatrix:list[float])->None:
        ...
    
    def setShapeMass(self,shapeHandle:int, mass:float)->None:
        ...
    
    def setShapeMaterial(self,shapeHandle:int, materialIdOrShapeHandle:int)->None:
        ...
    
    def setShapeTexture(self,shapeHandle:int, textureId:int, mappingMode:int, options:int, uvScaling:list[float], position:Optional[list[float]] = None, orientation:Optional[list[float]] = None)->None:
        ...
    
    def setStepping(self,enabled:bool)->int:
        ...
    
    def setStringParam(self,parameter:int, stringState:str)->None:
        ...
    
    def setStringSignal(self,signalName:str, signalValue:list[int])->None:
        ...
    
    def setVisionSensorImg(self,sensorHandle:int, image:list[int], options:Optional[int] = None, pos:Optional[list[int]] = None, size:Optional[list[int]] = None)->None:
        ...
    
    def startSimulation(self)->int:
        ...
    
    def step(self)->None:
        ...
    
    def stopSimulation(self)->int:
        ...
    
    def subtractObjectFromOctree(self,octreeHandle:int, objectHandle:int, options:int)->int:
        ...
    
    def subtractObjectFromPointCloud(self,pointCloudHandle:int, objectHandle:int, options:int, tolerance:float)->int:
        ...
    
    def textEditorClose(self,handle:int)->tuple[str, list[int], list[int]]:
        ...
    
    def textEditorGetInfo(self,handle:int)->tuple[str, list[int], list[int], bool]:
        ...
    
    def textEditorOpen(self,initText:str, properties:str)->int:
        ...
    
    def textEditorShow(self,handle:int, showState:bool)->None:
        ...
    
    def transformBuffer(self,inBuffer:list[int], inFormat:int, multiplier:float, offset:float, outFormat:int)->list[int]:
        ...
    
    def transformImage(self,image:list[int], resolution:list[int], options:int)->None:
        ...
    
    def ungroupShape(self,shapeHandle:int)->list[int]:
        ...
    
    def unpackDoubleTable(self,data:list[int], startDoubleIndex:Optional[int] = None, doubleCount:Optional[int] = None, additionalByteOffset:Optional[int] = None)->list[float]:
        ...
    
    def unpackFloatTable(self,data:list[int], startFloatIndex:Optional[int] = None, floatCount:Optional[int] = None, additionalByteOffset:Optional[int] = None)->list[float]:
        ...
    
    def unpackInt32Table(self,data:list[int], startInt32Index:Optional[int] = None, int32Count:Optional[int] = None, additionalByteOffset:Optional[int] = None)->list[int]:
        ...
    
    def unpackTable(self,buffer:list[int])->dict:
        ...
    
    def unpackUInt16Table(self,data:list[int], startUint16Index:Optional[int] = None, uint16Count:Optional[int] = None, additionalByteOffset:Optional[int] = None)->list[int]:
        ...
    
    def unpackUInt32Table(self,data:list[int], startUint32Index:Optional[int] = None, uint32Count:Optional[int] = None, additionalByteOffset:Optional[int] = None)->list[int]:
        ...
    
    def unpackUInt8Table(self,data:list[int], startUint8Index:Optional[int] = None, uint8count:Optional[int] = None)->list[int]:
        ...
    
    def visitTree(self,rootHandle:int, visitorFunc:str, options:Optional[dict] = None)->None:
        ...
    
    def wait(self,dt:float, simulationTime:Optional[bool] = None)->float:
        ...
    
    def waitForSignal(self,sigName:str)->dict:
        ...
    
    def writeCustomDataBlock(self,objectHandle:int, tagName:str, data:list[int])->None:
        ...
    
    def writeCustomDataBlockEx(self,handle:int, tagName:str, data:str, options:Optional[dict] = None)->None:
        ...
    
    def writeCustomTableData(self,handle:int, tagName:str, theTable:dict, options:Optional[dict] = None)->None:
        ...
    
    def writeTexture(self,textureId:int, options:int, textureData:list[int], posX:Optional[int] = None, posY:Optional[int] = None, sizeX:Optional[int] = None, sizeY:Optional[int] = None, interpol:Optional[float] = None)->None:
        ...
    
    def yawPitchRollToAlphaBetaGamma(self,yawAngle:float, pitchAngle:float, rollAngle:float)->tuple[float, float, float]:
        ...
    
    def yield(self)->None:
        ...

